/* tslint:disable */
/* eslint-disable */
/**
 * STP API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { SubscriptionCheckResponse } from '../models';
/**
 * STPApi - axios parameter creator
 * @export
 */
export const STPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if a wallet address is subscribed to a given STP contract.
         * @summary Subscription check by wallet address
         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time 
         * @param {string} contract_address Ethereum address of the STP contract 
         * @param {string} chain_id Chain ID of the STP contract 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
         * 
         */
        fetchSubscriptionCheck: async (addresses: string, contract_address: string, chain_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addresses' is not null or undefined
            assertParamExists('fetchSubscriptionCheck', 'addresses', addresses)
            // verify required parameter 'contract_address' is not null or undefined
            assertParamExists('fetchSubscriptionCheck', 'contract_address', contract_address)
            // verify required parameter 'chain_id' is not null or undefined
            assertParamExists('fetchSubscriptionCheck', 'chain_id', chain_id)
            const localVarPath = `/stp/subscription_check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (addresses !== undefined) {
                localVarQueryParameter['addresses'] = addresses;
            }

            if (contract_address !== undefined) {
                localVarQueryParameter['contract_address'] = contract_address;
            }

            if (chain_id !== undefined) {
                localVarQueryParameter['chain_id'] = chain_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * STPApi - functional programming interface
 * @export
 */
export const STPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = STPApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if a wallet address is subscribed to a given STP contract.
         * @summary Subscription check by wallet address
         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time 
         * @param {string} contract_address Ethereum address of the STP contract 
         * @param {string} chain_id Chain ID of the STP contract 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
         * 
         */
        async fetchSubscriptionCheck(addresses: string, contract_address: string, chain_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscriptionCheck(addresses, contract_address, chain_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['STPApi.fetchSubscriptionCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * STPApi - factory interface
 * @export
 */
export const STPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = STPApiFp(configuration)
    return {
        /**
         * Check if a wallet address is subscribed to a given STP contract.
         * @summary Subscription check by wallet address
         * @param {STPApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
         * 
         */
        fetchSubscriptionCheck(requestParameters: STPApiFetchSubscriptionCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionCheckResponse> {
            return localVarFp.fetchSubscriptionCheck(requestParameters.addresses, requestParameters.contract_address, requestParameters.chain_id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * STPApi - interface
 * @export
 * @interface STPApi
 */
export interface STPApiInterface {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {STPApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STPApiInterface
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     * 
     */
    fetchSubscriptionCheck(requestParameters: STPApiFetchSubscriptionCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionCheckResponse>;

}

/**
 * Request parameters for fetchSubscriptionCheck operation in STPApi.
 * @export
 * @interface STPApiFetchSubscriptionCheckRequest
 */
export interface STPApiFetchSubscriptionCheckRequest {
    /**
     * Comma separated list of Ethereum addresses, up to 350 at a time
     * 
     * 
     * @type {string}
     * @memberof STPApiFetchSubscriptionCheck
     */
    readonly addresses: string

    /**
     * Ethereum address of the STP contract
     * 
     * 
     * @type {string}
     * @memberof STPApiFetchSubscriptionCheck
     */
    readonly contract_address: string

    /**
     * Chain ID of the STP contract
     * 
     * 
     * @type {string}
     * @memberof STPApiFetchSubscriptionCheck
     */
    readonly chain_id: string
}

/**
 * STPApi - object-oriented interface
 * @export
 * @class STPApi
 * @extends {BaseAPI}
 */
export class STPApi extends BaseAPI implements STPApiInterface {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {STPApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STPApi
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     * 
     */
    public fetchSubscriptionCheck(requestParameters: STPApiFetchSubscriptionCheckRequest, options?: RawAxiosRequestConfig) {
        return STPApiFp(this.configuration).fetchSubscriptionCheck(requestParameters.addresses, requestParameters.contract_address, requestParameters.chain_id, options).then((request) => request(this.axios, this.basePath));
    }
}

