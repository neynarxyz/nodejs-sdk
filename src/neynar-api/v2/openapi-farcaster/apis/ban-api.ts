/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BanListResponse } from '../models';
// @ts-ignore
import { BanReqBody } from '../models';
// @ts-ignore
import { BanResponse } from '../models';
// @ts-ignore
import { ErrorRes } from '../models';
/**
 * BanApi - axios parameter creator
 * @export
 */
export const BanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
         * @summary Ban FIDs from app
         * @param {string} apiKey API key required for authentication.
         * @param {BanReqBody} banReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBan: async (apiKey: string, banReqBody: BanReqBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('addBan', 'apiKey', apiKey)
            // verify required parameter 'banReqBody' is not null or undefined
            assertParamExists('addBan', 'banReqBody', banReqBody)
            const localVarPath = `/farcaster/ban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(banReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all FIDs that your app has banned.
         * @summary Banned FIDs of app
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to fetch (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banList: async (apiKey: string, limit?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('banList', 'apiKey', apiKey)
            const localVarPath = `/farcaster/ban/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a list of FIDs from the app associated with your API key.
         * @summary Unban FIDs from app
         * @param {string} apiKey API key required for authentication.
         * @param {BanReqBody} banReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBan: async (apiKey: string, banReqBody: BanReqBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('deleteBan', 'apiKey', apiKey)
            // verify required parameter 'banReqBody' is not null or undefined
            assertParamExists('deleteBan', 'banReqBody', banReqBody)
            const localVarPath = `/farcaster/ban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(banReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BanApi - functional programming interface
 * @export
 */
export const BanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BanApiAxiosParamCreator(configuration)
    return {
        /**
         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
         * @summary Ban FIDs from app
         * @param {string} apiKey API key required for authentication.
         * @param {BanReqBody} banReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBan(apiKey: string, banReqBody: BanReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBan(apiKey, banReqBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches all FIDs that your app has banned.
         * @summary Banned FIDs of app
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to fetch (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async banList(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.banList(apiKey, limit, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a list of FIDs from the app associated with your API key.
         * @summary Unban FIDs from app
         * @param {string} apiKey API key required for authentication.
         * @param {BanReqBody} banReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBan(apiKey: string, banReqBody: BanReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBan(apiKey, banReqBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BanApi - factory interface
 * @export
 */
export const BanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BanApiFp(configuration)
    return {
        /**
         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
         * @summary Ban FIDs from app
         * @param {string} apiKey API key required for authentication.
         * @param {BanReqBody} banReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBan(apiKey: string, banReqBody: BanReqBody, options?: any): AxiosPromise<BanResponse> {
            return localVarFp.addBan(apiKey, banReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all FIDs that your app has banned.
         * @summary Banned FIDs of app
         * @param {string} apiKey API key required for authentication.
         * @param {number} [limit] Number of results to fetch (default 20, max 100).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banList(apiKey: string, limit?: number, cursor?: string, options?: any): AxiosPromise<BanListResponse> {
            return localVarFp.banList(apiKey, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a list of FIDs from the app associated with your API key.
         * @summary Unban FIDs from app
         * @param {string} apiKey API key required for authentication.
         * @param {BanReqBody} banReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBan(apiKey: string, banReqBody: BanReqBody, options?: any): AxiosPromise<BanResponse> {
            return localVarFp.deleteBan(apiKey, banReqBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BanApi - object-oriented interface
 * @export
 * @class BanApi
 * @extends {BaseAPI}
 */
export class BanApi extends BaseAPI {
    /**
     * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
     * @summary Ban FIDs from app
     * @param {string} apiKey API key required for authentication.
     * @param {BanReqBody} banReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BanApi
     */
    public addBan(apiKey: string, banReqBody: BanReqBody, options?: AxiosRequestConfig) {
        return BanApiFp(this.configuration).addBan(apiKey, banReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches all FIDs that your app has banned.
     * @summary Banned FIDs of app
     * @param {string} apiKey API key required for authentication.
     * @param {number} [limit] Number of results to fetch (default 20, max 100).
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BanApi
     */
    public banList(apiKey: string, limit?: number, cursor?: string, options?: AxiosRequestConfig) {
        return BanApiFp(this.configuration).banList(apiKey, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a list of FIDs from the app associated with your API key.
     * @summary Unban FIDs from app
     * @param {string} apiKey API key required for authentication.
     * @param {BanReqBody} banReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BanApi
     */
    public deleteBan(apiKey: string, banReqBody: BanReqBody, options?: AxiosRequestConfig) {
        return BanApiFp(this.configuration).deleteBan(apiKey, banReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}
