/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteFrameResponse } from '../models';
// @ts-ignore
import { DeleteNeynarFrameRequest } from '../models';
// @ts-ignore
import { ErrorRes } from '../models';
// @ts-ignore
import { Frame } from '../models';
// @ts-ignore
import { FrameActionReqBody } from '../models';
// @ts-ignore
import { FrameDeveloperManagedActionReqBody } from '../models';
// @ts-ignore
import { FrameFromUrl200Response } from '../models';
// @ts-ignore
import { FrameType } from '../models';
// @ts-ignore
import { FrameValidateAnalyticsResponse } from '../models';
// @ts-ignore
import { FrameValidateListResponse } from '../models';
// @ts-ignore
import { NeynarFrame } from '../models';
// @ts-ignore
import { NeynarFrameCreationRequest } from '../models';
// @ts-ignore
import { NeynarFrameUpdateRequest } from '../models';
// @ts-ignore
import { ValidateFrameActionResponse } from '../models';
// @ts-ignore
import { ValidateFrameAnalyticsType } from '../models';
// @ts-ignore
import { ValidateFrameRequest } from '../models';
/**
 * FrameApi - axios parameter creator
 * @export
 */
export const FrameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete a frame
         * @param {string} apiKey API key required for authentication.
         * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNeynarFrame: async (apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('deleteNeynarFrame', 'apiKey', apiKey)
            // verify required parameter 'deleteNeynarFrameRequest' is not null or undefined
            assertParamExists('deleteNeynarFrame', 'deleteNeynarFrameRequest', deleteNeynarFrameRequest)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteNeynarFrameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of frames made by the developer (identified by API key)
         * @summary Retrieve a list of frames
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNeynarFrames: async (apiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('fetchNeynarFrames', 'apiKey', apiKey)
            const localVarPath = `/farcaster/frame/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Fetches the frame meta tags from the URL
         * @param {string} apiKey API key required for authentication.
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frameFromUrl: async (apiKey: string, url: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('frameFromUrl', 'apiKey', apiKey)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('frameFromUrl', 'url', url)
            const localVarPath = `/farcaster/frame/crawl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a frame either by UUID or Neynar URL
         * @summary Retrieve a frame by UUID or URL
         * @param {string} apiKey API key required for authentication.
         * @param {FrameType} type 
         * @param {string} [uuid] UUID of the frame to retrieve
         * @param {string} [url] URL of the Neynar frame to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupNeynarFrame: async (apiKey: string, type: FrameType, uuid?: string, url?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('lookupNeynarFrame', 'apiKey', apiKey)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('lookupNeynarFrame', 'type', type)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Posts a frame action, cast action or a cast composer action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction: async (apiKey: string, frameActionReqBody: FrameActionReqBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('postFrameAction', 'apiKey', apiKey)
            // verify required parameter 'frameActionReqBody' is not null or undefined
            assertParamExists('postFrameAction', 'frameActionReqBody', frameActionReqBody)
            const localVarPath = `/farcaster/frame/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frameActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Posts a frame signature packet
         * @param {string} apiKey API key required for authentication.
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameDeveloperManagedAction: async (apiKey: string, frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('postFrameDeveloperManagedAction', 'apiKey', apiKey)
            // verify required parameter 'frameDeveloperManagedActionReqBody' is not null or undefined
            assertParamExists('postFrameDeveloperManagedAction', 'frameDeveloperManagedActionReqBody', frameDeveloperManagedActionReqBody)
            const localVarPath = `/farcaster/frame/developer_managed/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frameDeveloperManagedActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create a new frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishNeynarFrame: async (apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('publishNeynarFrame', 'apiKey', apiKey)
            // verify required parameter 'neynarFrameCreationRequest' is not null or undefined
            assertParamExists('publishNeynarFrame', 'neynarFrameCreationRequest', neynarFrameCreationRequest)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(neynarFrameCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update an existing frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNeynarFrame: async (apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateNeynarFrame', 'apiKey', apiKey)
            // verify required parameter 'neynarFrameUpdateRequest' is not null or undefined
            assertParamExists('updateNeynarFrame', 'neynarFrameUpdateRequest', neynarFrameUpdateRequest)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(neynarFrameUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validates a frame action against Farcaster Hub
         * @param {string} apiKey API key required for authentication.
         * @param {ValidateFrameRequest} validateFrameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrame: async (apiKey: string, validateFrameRequest: ValidateFrameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('validateFrame', 'apiKey', apiKey)
            // verify required parameter 'validateFrameRequest' is not null or undefined
            assertParamExists('validateFrame', 'validateFrameRequest', validateFrameRequest)
            const localVarPath = `/farcaster/frame/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validateFrameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Retrieve analytics for the frame
         * @param {string} apiKey API key required for authentication.
         * @param {string} frameUrl 
         * @param {ValidateFrameAnalyticsType} analyticsType 
         * @param {string} start 
         * @param {string} stop 
         * @param {'10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameAnalytics: async (apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('validateFrameAnalytics', 'apiKey', apiKey)
            // verify required parameter 'frameUrl' is not null or undefined
            assertParamExists('validateFrameAnalytics', 'frameUrl', frameUrl)
            // verify required parameter 'analyticsType' is not null or undefined
            assertParamExists('validateFrameAnalytics', 'analyticsType', analyticsType)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('validateFrameAnalytics', 'start', start)
            // verify required parameter 'stop' is not null or undefined
            assertParamExists('validateFrameAnalytics', 'stop', stop)
            const localVarPath = `/farcaster/frame/validate/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (frameUrl !== undefined) {
                localVarQueryParameter['frame_url'] = frameUrl;
            }

            if (analyticsType !== undefined) {
                localVarQueryParameter['analytics_type'] = analyticsType;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (stop !== undefined) {
                localVarQueryParameter['stop'] = (stop as any instanceof Date) ?
                    (stop as any).toISOString() :
                    stop;
            }

            if (aggregateWindow !== undefined) {
                localVarQueryParameter['aggregate_window'] = aggregateWindow;
            }

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all the frames validated by a user
         * @summary Retrieve a list of all the frames validated by a user
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameList: async (apiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('validateFrameList', 'apiKey', apiKey)
            const localVarPath = `/farcaster/frame/validate/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FrameApi - functional programming interface
 * @export
 */
export const FrameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FrameApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete a frame
         * @param {string} apiKey API key required for authentication.
         * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNeynarFrame(apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFrameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of frames made by the developer (identified by API key)
         * @summary Retrieve a list of frames
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchNeynarFrames(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NeynarFrame>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNeynarFrames(apiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Fetches the frame meta tags from the URL
         * @param {string} apiKey API key required for authentication.
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async frameFromUrl(apiKey: string, url: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameFromUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.frameFromUrl(apiKey, url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a frame either by UUID or Neynar URL
         * @summary Retrieve a frame by UUID or URL
         * @param {string} apiKey API key required for authentication.
         * @param {FrameType} type 
         * @param {string} [uuid] UUID of the frame to retrieve
         * @param {string} [url] URL of the Neynar frame to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lookupNeynarFrame(apiKey: string, type: FrameType, uuid?: string, url?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupNeynarFrame(apiKey, type, uuid, url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Posts a frame action, cast action or a cast composer action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameAction(apiKey, frameActionReqBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Posts a frame signature packet
         * @param {string} apiKey API key required for authentication.
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFrameDeveloperManagedAction(apiKey: string, frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameDeveloperManagedAction(apiKey, frameDeveloperManagedActionReqBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create a new frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishNeynarFrame(apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishNeynarFrame(apiKey, neynarFrameCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update an existing frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNeynarFrame(apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validates a frame action against Farcaster Hub
         * @param {string} apiKey API key required for authentication.
         * @param {ValidateFrameRequest} validateFrameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFrame(apiKey: string, validateFrameRequest: ValidateFrameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateFrameActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrame(apiKey, validateFrameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Retrieve analytics for the frame
         * @param {string} apiKey API key required for authentication.
         * @param {string} frameUrl 
         * @param {ValidateFrameAnalyticsType} analyticsType 
         * @param {string} start 
         * @param {string} stop 
         * @param {'10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFrameAnalytics(apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateAnalyticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of all the frames validated by a user
         * @summary Retrieve a list of all the frames validated by a user
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFrameList(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameList(apiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FrameApi - factory interface
 * @export
 */
export const FrameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FrameApiFp(configuration)
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete a frame
         * @param {string} apiKey API key required for authentication.
         * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNeynarFrame(apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options?: any): AxiosPromise<DeleteFrameResponse> {
            return localVarFp.deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of frames made by the developer (identified by API key)
         * @summary Retrieve a list of frames
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNeynarFrames(apiKey: string, options?: any): AxiosPromise<Array<NeynarFrame>> {
            return localVarFp.fetchNeynarFrames(apiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Fetches the frame meta tags from the URL
         * @param {string} apiKey API key required for authentication.
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frameFromUrl(apiKey: string, url: string, options?: any): AxiosPromise<FrameFromUrl200Response> {
            return localVarFp.frameFromUrl(apiKey, url, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a frame either by UUID or Neynar URL
         * @summary Retrieve a frame by UUID or URL
         * @param {string} apiKey API key required for authentication.
         * @param {FrameType} type 
         * @param {string} [uuid] UUID of the frame to retrieve
         * @param {string} [url] URL of the Neynar frame to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupNeynarFrame(apiKey: string, type: FrameType, uuid?: string, url?: string, options?: any): AxiosPromise<NeynarFrame> {
            return localVarFp.lookupNeynarFrame(apiKey, type, uuid, url, options).then((request) => request(axios, basePath));
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Posts a frame action, cast action or a cast composer action
         * @param {string} apiKey API key required for authentication.
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: any): AxiosPromise<Frame> {
            return localVarFp.postFrameAction(apiKey, frameActionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Posts a frame signature packet
         * @param {string} apiKey API key required for authentication.
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameDeveloperManagedAction(apiKey: string, frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: any): AxiosPromise<Frame> {
            return localVarFp.postFrameDeveloperManagedAction(apiKey, frameDeveloperManagedActionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create a new frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishNeynarFrame(apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options?: any): AxiosPromise<NeynarFrame> {
            return localVarFp.publishNeynarFrame(apiKey, neynarFrameCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update an existing frame
         * @param {string} apiKey API key required for authentication.
         * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNeynarFrame(apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options?: any): AxiosPromise<NeynarFrame> {
            return localVarFp.updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validates a frame action against Farcaster Hub
         * @param {string} apiKey API key required for authentication.
         * @param {ValidateFrameRequest} validateFrameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrame(apiKey: string, validateFrameRequest: ValidateFrameRequest, options?: any): AxiosPromise<ValidateFrameActionResponse> {
            return localVarFp.validateFrame(apiKey, validateFrameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Retrieve analytics for the frame
         * @param {string} apiKey API key required for authentication.
         * @param {string} frameUrl 
         * @param {ValidateFrameAnalyticsType} analyticsType 
         * @param {string} start 
         * @param {string} stop 
         * @param {'10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameAnalytics(apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options?: any): AxiosPromise<FrameValidateAnalyticsResponse> {
            return localVarFp.validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all the frames validated by a user
         * @summary Retrieve a list of all the frames validated by a user
         * @param {string} apiKey API key required for authentication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameList(apiKey: string, options?: any): AxiosPromise<FrameValidateListResponse> {
            return localVarFp.validateFrameList(apiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
export class FrameApi extends BaseAPI {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete a frame
     * @param {string} apiKey API key required for authentication.
     * @param {DeleteNeynarFrameRequest} deleteNeynarFrameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public deleteNeynarFrame(apiKey: string, deleteNeynarFrameRequest: DeleteNeynarFrameRequest, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).deleteNeynarFrame(apiKey, deleteNeynarFrameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of frames made by the developer (identified by API key)
     * @summary Retrieve a list of frames
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public fetchNeynarFrames(apiKey: string, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchNeynarFrames(apiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the frame meta tags from the URL
     * @summary Fetches the frame meta tags from the URL
     * @param {string} apiKey API key required for authentication.
     * @param {string} url The frame URL to crawl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public frameFromUrl(apiKey: string, url: string, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).frameFromUrl(apiKey, url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a frame either by UUID or Neynar URL
     * @summary Retrieve a frame by UUID or URL
     * @param {string} apiKey API key required for authentication.
     * @param {FrameType} type 
     * @param {string} [uuid] UUID of the frame to retrieve
     * @param {string} [url] URL of the Neynar frame to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public lookupNeynarFrame(apiKey: string, type: FrameType, uuid?: string, url?: string, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).lookupNeynarFrame(apiKey, type, uuid, url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
     * @summary Posts a frame action, cast action or a cast composer action
     * @param {string} apiKey API key required for authentication.
     * @param {FrameActionReqBody} frameActionReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public postFrameAction(apiKey: string, frameActionReqBody: FrameActionReqBody, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).postFrameAction(apiKey, frameActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
     * @summary Posts a frame signature packet
     * @param {string} apiKey API key required for authentication.
     * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public postFrameDeveloperManagedAction(apiKey: string, frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).postFrameDeveloperManagedAction(apiKey, frameDeveloperManagedActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new frame with a list of pages.
     * @summary Create a new frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameCreationRequest} neynarFrameCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public publishNeynarFrame(apiKey: string, neynarFrameCreationRequest: NeynarFrameCreationRequest, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).publishNeynarFrame(apiKey, neynarFrameCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update an existing frame
     * @param {string} apiKey API key required for authentication.
     * @param {NeynarFrameUpdateRequest} neynarFrameUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public updateNeynarFrame(apiKey: string, neynarFrameUpdateRequest: NeynarFrameUpdateRequest, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).updateNeynarFrame(apiKey, neynarFrameUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
     * @summary Validates a frame action against Farcaster Hub
     * @param {string} apiKey API key required for authentication.
     * @param {ValidateFrameRequest} validateFrameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public validateFrame(apiKey: string, validateFrameRequest: ValidateFrameRequest, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).validateFrame(apiKey, validateFrameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Retrieve analytics for the frame
     * @param {string} apiKey API key required for authentication.
     * @param {string} frameUrl 
     * @param {ValidateFrameAnalyticsType} analyticsType 
     * @param {string} start 
     * @param {string} stop 
     * @param {'10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d'} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public validateFrameAnalytics(apiKey: string, frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: '10s' | '1m' | '2m' | '5m' | '10m' | '20m' | '30m' | '2h' | '12h' | '1d' | '7d', options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).validateFrameAnalytics(apiKey, frameUrl, analyticsType, start, stop, aggregateWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all the frames validated by a user
     * @summary Retrieve a list of all the frames validated by a user
     * @param {string} apiKey API key required for authentication.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public validateFrameList(apiKey: string, options?: AxiosRequestConfig) {
        return FrameApiFp(this.configuration).validateFrameList(apiKey, options).then((request) => request(this.axios, this.basePath));
    }
}
