/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteFrameReqBody } from '../models';
// @ts-ignore
import type { DeleteFrameResponse } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { FetchFrameMetaTagsFromUrl200Response } from '../models';
// @ts-ignore
import type { Frame } from '../models';
// @ts-ignore
import type { FrameActionReqBody } from '../models';
// @ts-ignore
import type { FrameDeveloperManagedActionReqBody } from '../models';
// @ts-ignore
import type { FrameType } from '../models';
// @ts-ignore
import type { FrameValidateAnalyticsResponse } from '../models';
// @ts-ignore
import type { FrameValidateListResponse } from '../models';
// @ts-ignore
import type { NeynarFrame } from '../models';
// @ts-ignore
import type { NeynarFrameCreationReqBody } from '../models';
// @ts-ignore
import type { NeynarFrameUpdateReqBody } from '../models';
// @ts-ignore
import type { ValidateFrameActionReqBody } from '../models';
// @ts-ignore
import type { ValidateFrameActionResponse } from '../models';
// @ts-ignore
import type { ValidateFrameAnalyticsType } from '../models';
/**
 * FrameApi - axios parameter creator
 * @export
 */
export const FrameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {DeleteFrameReqBody} deleteFrameReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNeynarFrame: async (deleteFrameReqBody: DeleteFrameReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteFrameReqBody' is not null or undefined
            assertParamExists('deleteNeynarFrame', 'deleteFrameReqBody', deleteFrameReqBody)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteFrameReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFrameMetaTagsFromUrl: async (url: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('fetchFrameMetaTagsFromUrl', 'url', url)
            const localVarPath = `/farcaster/frame/crawl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNeynarFrames: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farcaster/frame/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {string} frameUrl 
         * @param {ValidateFrameAnalyticsType} analyticsType 
         * @param {string} start 
         * @param {string} stop 
         * @param {FetchValidateFrameAnalyticsAggregateWindowEnum} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchValidateFrameAnalytics: async (frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: FetchValidateFrameAnalyticsAggregateWindowEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameUrl' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'frameUrl', frameUrl)
            // verify required parameter 'analyticsType' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'analyticsType', analyticsType)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'start', start)
            // verify required parameter 'stop' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'stop', stop)
            const localVarPath = `/farcaster/frame/validate/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (frameUrl !== undefined) {
                localVarQueryParameter['frame_url'] = frameUrl;
            }

            if (analyticsType !== undefined) {
                localVarQueryParameter['analytics_type'] = analyticsType;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (stop !== undefined) {
                localVarQueryParameter['stop'] = (stop as any instanceof Date) ?
                    (stop as any).toISOString() :
                    stop;
            }

            if (aggregateWindow !== undefined) {
                localVarQueryParameter['aggregate_window'] = aggregateWindow;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchValidateFrameList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farcaster/frame/validate/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameType} type 
         * @param {string} [uuid] UUID of the frame to fetch
         * @param {string} [url] URL of the Neynar frame to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupNeynarFrame: async (type: FrameType, uuid?: string, url?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('lookupNeynarFrame', 'type', type)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction: async (frameActionReqBody: FrameActionReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameActionReqBody' is not null or undefined
            assertParamExists('postFrameAction', 'frameActionReqBody', frameActionReqBody)
            const localVarPath = `/farcaster/frame/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frameActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Signature packet
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameActionDeveloperManaged: async (frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameDeveloperManagedActionReqBody' is not null or undefined
            assertParamExists('postFrameActionDeveloperManaged', 'frameDeveloperManagedActionReqBody', frameDeveloperManagedActionReqBody)
            const localVarPath = `/farcaster/frame/developer_managed/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frameDeveloperManagedActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishNeynarFrame: async (neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'neynarFrameCreationReqBody' is not null or undefined
            assertParamExists('publishNeynarFrame', 'neynarFrameCreationReqBody', neynarFrameCreationReqBody)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(neynarFrameCreationReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNeynarFrame: async (neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'neynarFrameUpdateReqBody' is not null or undefined
            assertParamExists('updateNeynarFrame', 'neynarFrameUpdateReqBody', neynarFrameUpdateReqBody)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(neynarFrameUpdateReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validate frame action
         * @param {ValidateFrameActionReqBody} validateFrameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameAction: async (validateFrameActionReqBody: ValidateFrameActionReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validateFrameActionReqBody' is not null or undefined
            assertParamExists('validateFrameAction', 'validateFrameActionReqBody', validateFrameActionReqBody)
            const localVarPath = `/farcaster/frame/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validateFrameActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FrameApi - functional programming interface
 * @export
 */
export const FrameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FrameApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {DeleteFrameReqBody} deleteFrameReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNeynarFrame(deleteFrameReqBody: DeleteFrameReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFrameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNeynarFrame(deleteFrameReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.deleteNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFrameMetaTagsFromUrl(url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchFrameMetaTagsFromUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFrameMetaTagsFromUrl(url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchFrameMetaTagsFromUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchNeynarFrames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NeynarFrame>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNeynarFrames(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchNeynarFrames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {string} frameUrl 
         * @param {ValidateFrameAnalyticsType} analyticsType 
         * @param {string} start 
         * @param {string} stop 
         * @param {FetchValidateFrameAnalyticsAggregateWindowEnum} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchValidateFrameAnalytics(frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: FetchValidateFrameAnalyticsAggregateWindowEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateAnalyticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameAnalytics(frameUrl, analyticsType, start, stop, aggregateWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchValidateFrameAnalytics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchValidateFrameList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchValidateFrameList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameType} type 
         * @param {string} [uuid] UUID of the frame to fetch
         * @param {string} [url] URL of the Neynar frame to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lookupNeynarFrame(type: FrameType, uuid?: string, url?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupNeynarFrame(type, uuid, url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.lookupNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFrameAction(frameActionReqBody: FrameActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameAction(frameActionReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.postFrameAction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Signature packet
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.postFrameActionDeveloperManaged']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishNeynarFrame(neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishNeynarFrame(neynarFrameCreationReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.publishNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNeynarFrame(neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNeynarFrame(neynarFrameUpdateReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.updateNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validate frame action
         * @param {ValidateFrameActionReqBody} validateFrameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFrameAction(validateFrameActionReqBody: ValidateFrameActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateFrameActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameAction(validateFrameActionReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.validateFrameAction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FrameApi - factory interface
 * @export
 */
export const FrameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FrameApiFp(configuration)
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {DeleteFrameReqBody} deleteFrameReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNeynarFrame(deleteFrameReqBody: DeleteFrameReqBody, options?: RawAxiosRequestConfig): AxiosPromise<DeleteFrameResponse> {
            return localVarFp.deleteNeynarFrame(deleteFrameReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFrameMetaTagsFromUrl(url: string, options?: RawAxiosRequestConfig): AxiosPromise<FetchFrameMetaTagsFromUrl200Response> {
            return localVarFp.fetchFrameMetaTagsFromUrl(url, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNeynarFrames(options?: RawAxiosRequestConfig): AxiosPromise<Array<NeynarFrame>> {
            return localVarFp.fetchNeynarFrames(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {string} frameUrl 
         * @param {ValidateFrameAnalyticsType} analyticsType 
         * @param {string} start 
         * @param {string} stop 
         * @param {FetchValidateFrameAnalyticsAggregateWindowEnum} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchValidateFrameAnalytics(frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: FetchValidateFrameAnalyticsAggregateWindowEnum, options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateAnalyticsResponse> {
            return localVarFp.fetchValidateFrameAnalytics(frameUrl, analyticsType, start, stop, aggregateWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchValidateFrameList(options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateListResponse> {
            return localVarFp.fetchValidateFrameList(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameType} type 
         * @param {string} [uuid] UUID of the frame to fetch
         * @param {string} [url] URL of the Neynar frame to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupNeynarFrame(type: FrameType, uuid?: string, url?: string, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame> {
            return localVarFp.lookupNeynarFrame(type, uuid, url, options).then((request) => request(axios, basePath));
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameActionReqBody} frameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameAction(frameActionReqBody: FrameActionReqBody, options?: RawAxiosRequestConfig): AxiosPromise<Frame> {
            return localVarFp.postFrameAction(frameActionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Signature packet
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: RawAxiosRequestConfig): AxiosPromise<Frame> {
            return localVarFp.postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishNeynarFrame(neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame> {
            return localVarFp.publishNeynarFrame(neynarFrameCreationReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNeynarFrame(neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame> {
            return localVarFp.updateNeynarFrame(neynarFrameUpdateReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validate frame action
         * @param {ValidateFrameActionReqBody} validateFrameActionReqBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFrameAction(validateFrameActionReqBody: ValidateFrameActionReqBody, options?: RawAxiosRequestConfig): AxiosPromise<ValidateFrameActionResponse> {
            return localVarFp.validateFrameAction(validateFrameActionReqBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
export class FrameApi extends BaseAPI {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete frame
     * @param {DeleteFrameReqBody} deleteFrameReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public deleteNeynarFrame(deleteFrameReqBody: DeleteFrameReqBody, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).deleteNeynarFrame(deleteFrameReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the frame meta tags from the URL
     * @summary Meta tags from URL
     * @param {string} url The frame URL to crawl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public fetchFrameMetaTagsFromUrl(url: string, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchFrameMetaTagsFromUrl(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of frames made by the developer (identified by API key)
     * @summary List of frames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public fetchNeynarFrames(options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchNeynarFrames(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the frame
     * @param {string} frameUrl 
     * @param {ValidateFrameAnalyticsType} analyticsType 
     * @param {string} start 
     * @param {string} stop 
     * @param {FetchValidateFrameAnalyticsAggregateWindowEnum} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public fetchValidateFrameAnalytics(frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: FetchValidateFrameAnalyticsAggregateWindowEnum, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchValidateFrameAnalytics(frameUrl, analyticsType, start, stop, aggregateWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of all the frames validated by a user
     * @summary All frames validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public fetchValidateFrameList(options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchValidateFrameList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a frame either by UUID or Neynar URL
     * @summary Frame by UUID or URL
     * @param {FrameType} type 
     * @param {string} [uuid] UUID of the frame to fetch
     * @param {string} [url] URL of the Neynar frame to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public lookupNeynarFrame(type: FrameType, uuid?: string, url?: string, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).lookupNeynarFrame(type, uuid, url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
     * @summary Post a frame action, cast action or a cast composer action
     * @param {FrameActionReqBody} frameActionReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public postFrameAction(frameActionReqBody: FrameActionReqBody, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).postFrameAction(frameActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
     * @summary Signature packet
     * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new frame with a list of pages.
     * @summary Create frame
     * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public publishNeynarFrame(neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).publishNeynarFrame(neynarFrameCreationReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update frame
     * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public updateNeynarFrame(neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).updateNeynarFrame(neynarFrameUpdateReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
     * @summary Validate frame action
     * @param {ValidateFrameActionReqBody} validateFrameActionReqBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     */
    public validateFrameAction(validateFrameActionReqBody: ValidateFrameActionReqBody, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).validateFrameAction(validateFrameActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const FetchValidateFrameAnalyticsAggregateWindowEnum = {
    _10s: '10s',
    _1m: '1m',
    _2m: '2m',
    _5m: '5m',
    _10m: '10m',
    _20m: '20m',
    _30m: '30m',
    _2h: '2h',
    _12h: '12h',
    _1d: '1d',
    _7d: '7d'
} as const;
export type FetchValidateFrameAnalyticsAggregateWindowEnum = typeof FetchValidateFrameAnalyticsAggregateWindowEnum[keyof typeof FetchValidateFrameAnalyticsAggregateWindowEnum];
