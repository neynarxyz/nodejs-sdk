/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { FollowSortType } from '../models';
// @ts-ignore
import type { FollowersResponse } from '../models';
// @ts-ignore
import type { RelevantFollowersResponse } from '../models';
// @ts-ignore
import type { UsersResponse } from '../models';
/**
 * FollowsApi - axios parameter creator
 * @export
 */
export const FollowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch a list of suggested users to follow. Used to help users discover new users to follow
         * @summary Suggest Follows
         * @param {number} fid FID of the user whose following you want to fetch. 
         * @param {number} [viewer_fid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
         * 
         */
        fetchFollowSuggestions: async (fid: number, viewer_fid?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchFollowSuggestions', 'fid', fid)
            const localVarPath = `/farcaster/following/suggested`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
         * @summary Relevant followers
         * @param {number} target_fid User who\&#39;s profile you are looking at 
         * @param {number} viewer_fid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
         * 
         */
        fetchRelevantFollowers: async (target_fid: number, viewer_fid: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target_fid' is not null or undefined
            assertParamExists('fetchRelevantFollowers', 'target_fid', target_fid)
            // verify required parameter 'viewer_fid' is not null or undefined
            assertParamExists('fetchRelevantFollowers', 'viewer_fid', viewer_fid)
            const localVarPath = `/farcaster/followers/relevant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (target_fid !== undefined) {
                localVarQueryParameter['target_fid'] = target_fid;
            }

            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of followers for a specific FID.
         * @summary Followers
         * @param {number} fid User who\&#39;s profile you are looking at 
         * @param {number} [viewer_fid] Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FollowSortType} [sort_type] Sort type for fetch followers. Default is &#x60;desc_chron&#x60; 
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
         * 
         */
        fetchUserFollowers: async (fid: number, viewer_fid?: number, sort_type?: FollowSortType, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchUserFollowers', 'fid', fid)
            const localVarPath = `/farcaster/followers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }

            if (sort_type !== undefined) {
                localVarQueryParameter['sort_type'] = sort_type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
         * @summary Followed by
         * @param {number} fid FID of the user whose following you want to fetch. 
         * @param {number} [viewer_fid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FollowSortType} [sort_type] Optional parameter to sort the users based on different criteria. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
         * 
         */
        fetchUserFollowing: async (fid: number, viewer_fid?: number, sort_type?: FollowSortType, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchUserFollowing', 'fid', fid)
            const localVarPath = `/farcaster/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }

            if (sort_type !== undefined) {
                localVarQueryParameter['sort_type'] = sort_type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FollowsApi - functional programming interface
 * @export
 */
export const FollowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FollowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch a list of suggested users to follow. Used to help users discover new users to follow
         * @summary Suggest Follows
         * @param {number} fid FID of the user whose following you want to fetch. 
         * @param {number} [viewer_fid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
         * 
         */
        async fetchFollowSuggestions(fid: number, viewer_fid?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFollowSuggestions(fid, viewer_fid, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowsApi.fetchFollowSuggestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
         * @summary Relevant followers
         * @param {number} target_fid User who\&#39;s profile you are looking at 
         * @param {number} viewer_fid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
         * 
         */
        async fetchRelevantFollowers(target_fid: number, viewer_fid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelevantFollowersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRelevantFollowers(target_fid, viewer_fid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowsApi.fetchRelevantFollowers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of followers for a specific FID.
         * @summary Followers
         * @param {number} fid User who\&#39;s profile you are looking at 
         * @param {number} [viewer_fid] Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FollowSortType} [sort_type] Sort type for fetch followers. Default is &#x60;desc_chron&#x60; 
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
         * 
         */
        async fetchUserFollowers(fid: number, viewer_fid?: number, sort_type?: FollowSortType, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowers(fid, viewer_fid, sort_type, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowsApi.fetchUserFollowers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
         * @summary Followed by
         * @param {number} fid FID of the user whose following you want to fetch. 
         * @param {number} [viewer_fid] Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FollowSortType} [sort_type] Optional parameter to sort the users based on different criteria. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
         * 
         */
        async fetchUserFollowing(fid: number, viewer_fid?: number, sort_type?: FollowSortType, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowing(fid, viewer_fid, sort_type, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowsApi.fetchUserFollowing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FollowsApi - factory interface
 * @export
 */
export const FollowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FollowsApiFp(configuration)
    return {
        /**
         * Fetch a list of suggested users to follow. Used to help users discover new users to follow
         * @summary Suggest Follows
         * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
         * 
         */
        fetchFollowSuggestions(requestParameters: FollowsApiFetchFollowSuggestionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersResponse> {
            return localVarFp.fetchFollowSuggestions(requestParameters.fid, requestParameters.viewer_fid, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
         * @summary Relevant followers
         * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
         * 
         */
        fetchRelevantFollowers(requestParameters: FollowsApiFetchRelevantFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<RelevantFollowersResponse> {
            return localVarFp.fetchRelevantFollowers(requestParameters.target_fid, requestParameters.viewer_fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of followers for a specific FID.
         * @summary Followers
         * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
         * 
         */
        fetchUserFollowers(requestParameters: FollowsApiFetchUserFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse> {
            return localVarFp.fetchUserFollowers(requestParameters.fid, requestParameters.viewer_fid, requestParameters.sort_type, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
         * @summary Followed by
         * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
         * 
         */
        fetchUserFollowing(requestParameters: FollowsApiFetchUserFollowingRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse> {
            return localVarFp.fetchUserFollowing(requestParameters.fid, requestParameters.viewer_fid, requestParameters.sort_type, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FollowsApi - interface
 * @export
 * @interface FollowsApi
 */
export interface FollowsApiInterface {
    /**
     * Fetch a list of suggested users to follow. Used to help users discover new users to follow
     * @summary Suggest Follows
     * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
     * 
     */
    fetchFollowSuggestions(requestParameters: FollowsApiFetchFollowSuggestionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersResponse>;

    /**
     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
     * @summary Relevant followers
     * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
     * 
     */
    fetchRelevantFollowers(requestParameters: FollowsApiFetchRelevantFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<RelevantFollowersResponse>;

    /**
     * Returns a list of followers for a specific FID.
     * @summary Followers
     * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     * 
     */
    fetchUserFollowers(requestParameters: FollowsApiFetchUserFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse>;

    /**
     * Fetch a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
     * @summary Followed by
     * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApiInterface
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     * 
     */
    fetchUserFollowing(requestParameters: FollowsApiFetchUserFollowingRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowersResponse>;

}

/**
 * Request parameters for fetchFollowSuggestions operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchFollowSuggestionsRequest
 */
export interface FollowsApiFetchFollowSuggestionsRequest {
    /**
     * FID of the user whose following you want to fetch.
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchFollowSuggestions
     */
    readonly fid: number

    /**
     * Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchFollowSuggestions
     */
    readonly viewer_fid?: number

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchFollowSuggestions
     */
    readonly limit?: number
}

/**
 * Request parameters for fetchRelevantFollowers operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchRelevantFollowersRequest
 */
export interface FollowsApiFetchRelevantFollowersRequest {
    /**
     * User who\&#39;s profile you are looking at
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchRelevantFollowers
     */
    readonly target_fid: number

    /**
     * The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchRelevantFollowers
     */
    readonly viewer_fid: number
}

/**
 * Request parameters for fetchUserFollowers operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchUserFollowersRequest
 */
export interface FollowsApiFetchUserFollowersRequest {
    /**
     * User who\&#39;s profile you are looking at
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly fid: number

    /**
     * Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly viewer_fid?: number

    /**
     * Sort type for fetch followers. Default is &#x60;desc_chron&#x60;
     * 
     * 
     * @type {FollowSortType}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly sort_type?: FollowSortType

    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * @type {string}
     * @memberof FollowsApiFetchUserFollowers
     */
    readonly cursor?: string
}

/**
 * Request parameters for fetchUserFollowing operation in FollowsApi.
 * @export
 * @interface FollowsApiFetchUserFollowingRequest
 */
export interface FollowsApiFetchUserFollowingRequest {
    /**
     * FID of the user whose following you want to fetch.
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly fid: number

    /**
     * Providing this will return a list of users that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly viewer_fid?: number

    /**
     * Optional parameter to sort the users based on different criteria.
     * 
     * 
     * @type {FollowSortType}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly sort_type?: FollowSortType

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * @type {number}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * @type {string}
     * @memberof FollowsApiFetchUserFollowing
     */
    readonly cursor?: string
}

/**
 * FollowsApi - object-oriented interface
 * @export
 * @class FollowsApi
 * @extends {BaseAPI}
 */
export class FollowsApi extends BaseAPI implements FollowsApiInterface {
    /**
     * Fetch a list of suggested users to follow. Used to help users discover new users to follow
     * @summary Suggest Follows
     * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)
     * 
     */
    public fetchFollowSuggestions(requestParameters: FollowsApiFetchFollowSuggestionsRequest, options?: RawAxiosRequestConfig) {
        return FollowsApiFp(this.configuration).fetchFollowSuggestions(requestParameters.fid, requestParameters.viewer_fid, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \"X, Y and Z follow this user\".
     * @summary Relevant followers
     * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)
     * 
     */
    public fetchRelevantFollowers(requestParameters: FollowsApiFetchRelevantFollowersRequest, options?: RawAxiosRequestConfig) {
        return FollowsApiFp(this.configuration).fetchRelevantFollowers(requestParameters.target_fid, requestParameters.viewer_fid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of followers for a specific FID.
     * @summary Followers
     * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)
     * 
     */
    public fetchUserFollowers(requestParameters: FollowsApiFetchUserFollowersRequest, options?: RawAxiosRequestConfig) {
        return FollowsApiFp(this.configuration).fetchUserFollowers(requestParameters.fid, requestParameters.viewer_fid, requestParameters.sort_type, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
     * @summary Followed by
     * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowsApi
     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)
     * 
     */
    public fetchUserFollowing(requestParameters: FollowsApiFetchUserFollowingRequest, options?: RawAxiosRequestConfig) {
        return FollowsApiFp(this.configuration).fetchUserFollowing(requestParameters.fid, requestParameters.viewer_fid, requestParameters.sort_type, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}

