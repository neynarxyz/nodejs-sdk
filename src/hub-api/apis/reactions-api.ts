/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { FetchCastReactions200Response } from '../models';
// @ts-ignore
import type { Reaction } from '../models';
// @ts-ignore
import type { ReactionType } from '../models';
/**
 * ReactionsApi - axios parameter creator
 * @export
 */
export const ReactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.
         * @summary On cast
         * @param {number} targetFid The FID of the cast\&#39;s creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash. 
         * @param {string} targetHash The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with \&#39;0x\&#39; that uniquely identifies the cast within the creator\&#39;s posts. Must be used with target_fid. 
         * @param {ReactionType} reactionType  
         * @param {number} [pageSize] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)
         * 
         */
        fetchCastReactions: async (targetFid: number, targetHash: string, reactionType: ReactionType, pageSize?: number, reverse?: boolean, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetFid' is not null or undefined
            assertParamExists('fetchCastReactions', 'targetFid', targetFid)
            // verify required parameter 'targetHash' is not null or undefined
            assertParamExists('fetchCastReactions', 'targetHash', targetHash)
            // verify required parameter 'reactionType' is not null or undefined
            assertParamExists('fetchCastReactions', 'reactionType', reactionType)
            const localVarPath = `/v1/reactionsByCast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (targetFid !== undefined) {
                localVarQueryParameter['target_fid'] = targetFid;
            }

            if (targetHash !== undefined) {
                localVarQueryParameter['target_hash'] = targetHash;
            }

            if (reactionType !== undefined) {
                localVarQueryParameter['reaction_type'] = reactionType;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.
         * @summary To a target URL
         * @param {string} url Target URL starting with \&#39;chain://\&#39;. 
         * @param {ReactionType} [reactionType]  
         * @param {number} [pageSize] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)
         * 
         */
        fetchReactionsByTarget: async (url: string, reactionType?: ReactionType, pageSize?: number, reverse?: boolean, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('fetchReactionsByTarget', 'url', url)
            const localVarPath = `/v1/reactionsByTarget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (reactionType !== undefined) {
                localVarQueryParameter['reaction_type'] = reactionType;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch reactions by a user.
         * @summary By FID
         * @param {number} fid The FID of the reaction\&#39;s creator 
         * @param {ReactionType} reactionType  
         * @param {number} [pageSize] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)
         * 
         */
        fetchUserReactions: async (fid: number, reactionType: ReactionType, pageSize?: number, reverse?: boolean, pageToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchUserReactions', 'fid', fid)
            // verify required parameter 'reactionType' is not null or undefined
            assertParamExists('fetchUserReactions', 'reactionType', reactionType)
            const localVarPath = `/v1/reactionsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (reactionType !== undefined) {
                localVarQueryParameter['reaction_type'] = reactionType;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lookup a reaction by its FID or cast.
         * @summary By FID or cast
         * @param {number} fid The FID of the reaction\&#39;s creator 
         * @param {number} targetFid The FID of the cast\&#39;s creator 
         * @param {string} targetHash The cast\&#39;s hash 
         * @param {ReactionType} reactionType  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)
         * 
         */
        lookupReactionById: async (fid: number, targetFid: number, targetHash: string, reactionType: ReactionType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('lookupReactionById', 'fid', fid)
            // verify required parameter 'targetFid' is not null or undefined
            assertParamExists('lookupReactionById', 'targetFid', targetFid)
            // verify required parameter 'targetHash' is not null or undefined
            assertParamExists('lookupReactionById', 'targetHash', targetHash)
            // verify required parameter 'reactionType' is not null or undefined
            assertParamExists('lookupReactionById', 'reactionType', reactionType)
            const localVarPath = `/v1/reactionById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (targetFid !== undefined) {
                localVarQueryParameter['target_fid'] = targetFid;
            }

            if (targetHash !== undefined) {
                localVarQueryParameter['target_hash'] = targetHash;
            }

            if (reactionType !== undefined) {
                localVarQueryParameter['reaction_type'] = reactionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReactionsApi - functional programming interface
 * @export
 */
export const ReactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.
         * @summary On cast
         * @param {number} targetFid The FID of the cast\&#39;s creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash. 
         * @param {string} targetHash The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with \&#39;0x\&#39; that uniquely identifies the cast within the creator\&#39;s posts. Must be used with target_fid. 
         * @param {ReactionType} reactionType  
         * @param {number} [pageSize] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)
         * 
         */
        async fetchCastReactions(targetFid: number, targetHash: string, reactionType: ReactionType, pageSize?: number, reverse?: boolean, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchCastReactions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastReactions(targetFid, targetHash, reactionType, pageSize, reverse, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReactionsApi.fetchCastReactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.
         * @summary To a target URL
         * @param {string} url Target URL starting with \&#39;chain://\&#39;. 
         * @param {ReactionType} [reactionType]  
         * @param {number} [pageSize] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)
         * 
         */
        async fetchReactionsByTarget(url: string, reactionType?: ReactionType, pageSize?: number, reverse?: boolean, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchCastReactions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReactionsByTarget(url, reactionType, pageSize, reverse, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReactionsApi.fetchReactionsByTarget']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch reactions by a user.
         * @summary By FID
         * @param {number} fid The FID of the reaction\&#39;s creator 
         * @param {ReactionType} reactionType  
         * @param {number} [pageSize] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)
         * 
         */
        async fetchUserReactions(fid: number, reactionType: ReactionType, pageSize?: number, reverse?: boolean, pageToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchCastReactions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserReactions(fid, reactionType, pageSize, reverse, pageToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReactionsApi.fetchUserReactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lookup a reaction by its FID or cast.
         * @summary By FID or cast
         * @param {number} fid The FID of the reaction\&#39;s creator 
         * @param {number} targetFid The FID of the cast\&#39;s creator 
         * @param {string} targetHash The cast\&#39;s hash 
         * @param {ReactionType} reactionType  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)
         * 
         */
        async lookupReactionById(fid: number, targetFid: number, targetHash: string, reactionType: ReactionType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupReactionById(fid, targetFid, targetHash, reactionType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReactionsApi.lookupReactionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReactionsApi - factory interface
 * @export
 */
export const ReactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReactionsApiFp(configuration)
    return {
        /**
         * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.
         * @summary On cast
         * @param {ReactionsApiFetchCastReactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)
         * 
         */
        fetchCastReactions(requestParameters: ReactionsApiFetchCastReactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchCastReactions200Response> {
            return localVarFp.fetchCastReactions(requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.
         * @summary To a target URL
         * @param {ReactionsApiFetchReactionsByTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)
         * 
         */
        fetchReactionsByTarget(requestParameters: ReactionsApiFetchReactionsByTargetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchCastReactions200Response> {
            return localVarFp.fetchReactionsByTarget(requestParameters.url, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch reactions by a user.
         * @summary By FID
         * @param {ReactionsApiFetchUserReactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)
         * 
         */
        fetchUserReactions(requestParameters: ReactionsApiFetchUserReactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchCastReactions200Response> {
            return localVarFp.fetchUserReactions(requestParameters.fid, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Lookup a reaction by its FID or cast.
         * @summary By FID or cast
         * @param {ReactionsApiLookupReactionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)
         * 
         */
        lookupReactionById(requestParameters: ReactionsApiLookupReactionByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Reaction> {
            return localVarFp.lookupReactionById(requestParameters.fid, requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReactionsApi - interface
 * @export
 * @interface ReactionsApi
 */
export interface ReactionsApiInterface {
    /**
     * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.
     * @summary On cast
     * @param {ReactionsApiFetchCastReactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiInterface
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)
     * 
     */
    fetchCastReactions(requestParameters: ReactionsApiFetchCastReactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchCastReactions200Response>;

    /**
     * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.
     * @summary To a target URL
     * @param {ReactionsApiFetchReactionsByTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiInterface
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)
     * 
     */
    fetchReactionsByTarget(requestParameters: ReactionsApiFetchReactionsByTargetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchCastReactions200Response>;

    /**
     * Fetch reactions by a user.
     * @summary By FID
     * @param {ReactionsApiFetchUserReactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiInterface
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)
     * 
     */
    fetchUserReactions(requestParameters: ReactionsApiFetchUserReactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchCastReactions200Response>;

    /**
     * Lookup a reaction by its FID or cast.
     * @summary By FID or cast
     * @param {ReactionsApiLookupReactionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApiInterface
     * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)
     * 
     */
    lookupReactionById(requestParameters: ReactionsApiLookupReactionByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Reaction>;

}

/**
 * Request parameters for fetchCastReactions operation in ReactionsApi.
 * @export
 * @interface ReactionsApiFetchCastReactionsRequest
 */
export interface ReactionsApiFetchCastReactionsRequest {
    /**
     * The FID of the cast\&#39;s creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash.
     * 
     * 
     * 
     * @type {number}
     * @memberof ReactionsApiFetchCastReactions
     */
    readonly targetFid: number

    /**
     * The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with \&#39;0x\&#39; that uniquely identifies the cast within the creator\&#39;s posts. Must be used with target_fid.
     * 
     * 
     * 
     * @type {string}
     * @memberof ReactionsApiFetchCastReactions
     */
    readonly targetHash: string

    /**
     * 
     * 
     * 
     * 
     * @type {ReactionType}
     * @memberof ReactionsApiFetchCastReactions
     */
    readonly reactionType: ReactionType

    /**
     * Maximum number of messages to return in a single response
     * 
     * 
     * 
     * @type {number}
     * @memberof ReactionsApiFetchCastReactions
     */
    readonly pageSize?: number

    /**
     * Reverse the sort order, returning latest messages first
     * 
     * 
     * 
     * @type {boolean}
     * @memberof ReactionsApiFetchCastReactions
     */
    readonly reverse?: boolean

    /**
     * The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     * 
     * 
     * 
     * @type {string}
     * @memberof ReactionsApiFetchCastReactions
     */
    readonly pageToken?: string
}

/**
 * Request parameters for fetchReactionsByTarget operation in ReactionsApi.
 * @export
 * @interface ReactionsApiFetchReactionsByTargetRequest
 */
export interface ReactionsApiFetchReactionsByTargetRequest {
    /**
     * Target URL starting with \&#39;chain://\&#39;.
     * 
     * 
     * 
     * @type {string}
     * @memberof ReactionsApiFetchReactionsByTarget
     */
    readonly url: string

    /**
     * 
     * 
     * 
     * 
     * @type {ReactionType}
     * @memberof ReactionsApiFetchReactionsByTarget
     */
    readonly reactionType?: ReactionType

    /**
     * Maximum number of messages to return in a single response
     * 
     * 
     * 
     * @type {number}
     * @memberof ReactionsApiFetchReactionsByTarget
     */
    readonly pageSize?: number

    /**
     * Reverse the sort order, returning latest messages first
     * 
     * 
     * 
     * @type {boolean}
     * @memberof ReactionsApiFetchReactionsByTarget
     */
    readonly reverse?: boolean

    /**
     * The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     * 
     * 
     * 
     * @type {string}
     * @memberof ReactionsApiFetchReactionsByTarget
     */
    readonly pageToken?: string
}

/**
 * Request parameters for fetchUserReactions operation in ReactionsApi.
 * @export
 * @interface ReactionsApiFetchUserReactionsRequest
 */
export interface ReactionsApiFetchUserReactionsRequest {
    /**
     * The FID of the reaction\&#39;s creator
     * 
     * 
     * 
     * @type {number}
     * @memberof ReactionsApiFetchUserReactions
     */
    readonly fid: number

    /**
     * 
     * 
     * 
     * 
     * @type {ReactionType}
     * @memberof ReactionsApiFetchUserReactions
     */
    readonly reactionType: ReactionType

    /**
     * Maximum number of messages to return in a single response
     * 
     * 
     * 
     * @type {number}
     * @memberof ReactionsApiFetchUserReactions
     */
    readonly pageSize?: number

    /**
     * Reverse the sort order, returning latest messages first
     * 
     * 
     * 
     * @type {boolean}
     * @memberof ReactionsApiFetchUserReactions
     */
    readonly reverse?: boolean

    /**
     * The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     * 
     * 
     * 
     * @type {string}
     * @memberof ReactionsApiFetchUserReactions
     */
    readonly pageToken?: string
}

/**
 * Request parameters for lookupReactionById operation in ReactionsApi.
 * @export
 * @interface ReactionsApiLookupReactionByIdRequest
 */
export interface ReactionsApiLookupReactionByIdRequest {
    /**
     * The FID of the reaction\&#39;s creator
     * 
     * 
     * 
     * @type {number}
     * @memberof ReactionsApiLookupReactionById
     */
    readonly fid: number

    /**
     * The FID of the cast\&#39;s creator
     * 
     * 
     * 
     * @type {number}
     * @memberof ReactionsApiLookupReactionById
     */
    readonly targetFid: number

    /**
     * The cast\&#39;s hash
     * 
     * 
     * 
     * @type {string}
     * @memberof ReactionsApiLookupReactionById
     */
    readonly targetHash: string

    /**
     * 
     * 
     * 
     * 
     * @type {ReactionType}
     * @memberof ReactionsApiLookupReactionById
     */
    readonly reactionType: ReactionType
}

/**
 * ReactionsApi - object-oriented interface
 * @export
 * @class ReactionsApi
 * @extends {BaseAPI}
 */
export class ReactionsApi extends BaseAPI implements ReactionsApiInterface {
    /**
     * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.
     * @summary On cast
     * @param {ReactionsApiFetchCastReactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApi
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)
     * 
     */
    public fetchCastReactions(requestParameters: ReactionsApiFetchCastReactionsRequest, options?: RawAxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).fetchCastReactions(requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.
     * @summary To a target URL
     * @param {ReactionsApiFetchReactionsByTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApi
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)
     * 
     */
    public fetchReactionsByTarget(requestParameters: ReactionsApiFetchReactionsByTargetRequest, options?: RawAxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).fetchReactionsByTarget(requestParameters.url, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch reactions by a user.
     * @summary By FID
     * @param {ReactionsApiFetchUserReactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApi
     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)
     * 
     */
    public fetchUserReactions(requestParameters: ReactionsApiFetchUserReactionsRequest, options?: RawAxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).fetchUserReactions(requestParameters.fid, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lookup a reaction by its FID or cast.
     * @summary By FID or cast
     * @param {ReactionsApiLookupReactionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionsApi
     * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)
     * 
     */
    public lookupReactionById(requestParameters: ReactionsApiLookupReactionByIdRequest, options?: RawAxiosRequestConfig) {
        return ReactionsApiFp(this.configuration).lookupReactionById(requestParameters.fid, requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, options).then((request) => request(this.axios, this.basePath));
    }
}

