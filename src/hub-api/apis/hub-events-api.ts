/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { FetchEvents200Response } from '../models';
// @ts-ignore
import type { HubEvent } from '../models';
/**
 * HubEventsApi - axios parameter creator
 * @export
 */
export const HubEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Page of events
         * @param {number} [from_event_id] An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
         * 
         */
        fetchEvents: async (from_event_id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (from_event_id !== undefined) {
                localVarQueryParameter['from_event_id'] = from_event_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Event by ID
         * @param {number} event_id The Hub Id of the event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
         * 
         */
        lookupEvent: async (event_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'event_id' is not null or undefined
            assertParamExists('lookupEvent', 'event_id', event_id)
            const localVarPath = `/v1/eventById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (event_id !== undefined) {
                localVarQueryParameter['event_id'] = event_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HubEventsApi - functional programming interface
 * @export
 */
export const HubEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HubEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Page of events
         * @param {number} [from_event_id] An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
         * 
         */
        async fetchEvents(from_event_id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchEvents200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchEvents(from_event_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HubEventsApi.fetchEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Event by ID
         * @param {number} event_id The Hub Id of the event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
         * 
         */
        async lookupEvent(event_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HubEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupEvent(event_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HubEventsApi.lookupEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HubEventsApi - factory interface
 * @export
 */
export const HubEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HubEventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Page of events
         * @param {HubEventsApiFetchEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
         * 
         */
        fetchEvents(requestParameters: HubEventsApiFetchEventsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FetchEvents200Response> {
            return localVarFp.fetchEvents(requestParameters.from_event_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Event by ID
         * @param {HubEventsApiLookupEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
         * 
         */
        lookupEvent(requestParameters: HubEventsApiLookupEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<HubEvent> {
            return localVarFp.lookupEvent(requestParameters.event_id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HubEventsApi - interface
 * @export
 * @interface HubEventsApi
 */
export interface HubEventsApiInterface {
    /**
     * 
     * @summary Page of events
     * @param {HubEventsApiFetchEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEventsApiInterface
     * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
     * 
     */
    fetchEvents(requestParameters?: HubEventsApiFetchEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchEvents200Response>;

    /**
     * 
     * @summary Event by ID
     * @param {HubEventsApiLookupEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEventsApiInterface
     * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
     * 
     */
    lookupEvent(requestParameters: HubEventsApiLookupEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<HubEvent>;

}

/**
 * Request parameters for fetchEvents operation in HubEventsApi.
 * @export
 * @interface HubEventsApiFetchEventsRequest
 */
export interface HubEventsApiFetchEventsRequest {
    /**
     * An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event
     * 
     * 
     * 
     * @type {number}
     * @memberof HubEventsApiFetchEvents
     */
    readonly from_event_id?: number
}

/**
 * Request parameters for lookupEvent operation in HubEventsApi.
 * @export
 * @interface HubEventsApiLookupEventRequest
 */
export interface HubEventsApiLookupEventRequest {
    /**
     * The Hub Id of the event
     * 
     * 
     * 
     * @type {number}
     * @memberof HubEventsApiLookupEvent
     */
    readonly event_id: number
}

/**
 * HubEventsApi - object-oriented interface
 * @export
 * @class HubEventsApi
 * @extends {BaseAPI}
 */
export class HubEventsApi extends BaseAPI implements HubEventsApiInterface {
    /**
     * 
     * @summary Page of events
     * @param {HubEventsApiFetchEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEventsApi
     * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)
     * 
     */
    public fetchEvents(requestParameters: HubEventsApiFetchEventsRequest = {}, options?: RawAxiosRequestConfig) {
        return HubEventsApiFp(this.configuration).fetchEvents(requestParameters.from_event_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Event by ID
     * @param {HubEventsApiLookupEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubEventsApi
     * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)
     * 
     */
    public lookupEvent(requestParameters: HubEventsApiLookupEventRequest, options?: RawAxiosRequestConfig) {
        return HubEventsApiFp(this.configuration).lookupEvent(requestParameters.event_id, options).then((request) => request(this.axios, this.basePath));
    }
}

