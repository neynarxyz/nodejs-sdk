/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { FetchUserOnChainEvents200Response } from '../models';
// @ts-ignore
import type { FetchUserOnChainSignersEvents200Response } from '../models';
// @ts-ignore
import type { OnChainEventIdRegister } from '../models';
// @ts-ignore
import type { OnChainEventType } from '../models';
/**
 * OnChainEventsApi - axios parameter creator
 * @export
 */
export const OnChainEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch a list of on-chain events provided by an FID
         * @param {number} fid The FID being requested 
         * @param {OnChainEventType} event_type The numeric of string value of the event type being requested. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)
         * 
         */
        fetchUserOnChainEvents: async (fid: number, event_type: OnChainEventType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchUserOnChainEvents', 'fid', fid)
            // verify required parameter 'event_type' is not null or undefined
            assertParamExists('fetchUserOnChainEvents', 'event_type', event_type)
            const localVarPath = `/v1/onChainEventsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (event_type !== undefined) {
                localVarQueryParameter['event_type'] = event_type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead
         * @summary Fetch a list of signers provided by an FID
         * @param {number} fid The FID being requested 
         * @param {string} [signer] The optional key of signer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)
         * 
         */
        fetchUserOnChainSignersEvents: async (fid: number, signer?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchUserOnChainSignersEvents', 'fid', fid)
            const localVarPath = `/v1/onChainSignersByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (signer !== undefined) {
                localVarQueryParameter['signer'] = signer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch an on chain ID Registry Event for a given Address
         * @param {string} address The ETH address being requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)
         * 
         */
        lookupOnChainIdRegistryEventByAddress: async (address: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('lookupOnChainIdRegistryEventByAddress', 'address', address)
            const localVarPath = `/v1/onChainIdRegistryEventByAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnChainEventsApi - functional programming interface
 * @export
 */
export const OnChainEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnChainEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch a list of on-chain events provided by an FID
         * @param {number} fid The FID being requested 
         * @param {OnChainEventType} event_type The numeric of string value of the event type being requested. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)
         * 
         */
        async fetchUserOnChainEvents(fid: number, event_type: OnChainEventType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchUserOnChainEvents200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserOnChainEvents(fid, event_type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnChainEventsApi.fetchUserOnChainEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead
         * @summary Fetch a list of signers provided by an FID
         * @param {number} fid The FID being requested 
         * @param {string} [signer] The optional key of signer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)
         * 
         */
        async fetchUserOnChainSignersEvents(fid: number, signer?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchUserOnChainSignersEvents200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserOnChainSignersEvents(fid, signer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnChainEventsApi.fetchUserOnChainSignersEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch an on chain ID Registry Event for a given Address
         * @param {string} address The ETH address being requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)
         * 
         */
        async lookupOnChainIdRegistryEventByAddress(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnChainEventIdRegister>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupOnChainIdRegistryEventByAddress(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnChainEventsApi.lookupOnChainIdRegistryEventByAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OnChainEventsApi - factory interface
 * @export
 */
export const OnChainEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnChainEventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch a list of on-chain events provided by an FID
         * @param {OnChainEventsApiFetchUserOnChainEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)
         * 
         */
        fetchUserOnChainEvents(requestParameters: OnChainEventsApiFetchUserOnChainEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchUserOnChainEvents200Response> {
            return localVarFp.fetchUserOnChainEvents(requestParameters.fid, requestParameters.event_type, options).then((request) => request(axios, basePath));
        },
        /**
         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead
         * @summary Fetch a list of signers provided by an FID
         * @param {OnChainEventsApiFetchUserOnChainSignersEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)
         * 
         */
        fetchUserOnChainSignersEvents(requestParameters: OnChainEventsApiFetchUserOnChainSignersEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchUserOnChainSignersEvents200Response> {
            return localVarFp.fetchUserOnChainSignersEvents(requestParameters.fid, requestParameters.signer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch an on chain ID Registry Event for a given Address
         * @param {OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)
         * 
         */
        lookupOnChainIdRegistryEventByAddress(requestParameters: OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<OnChainEventIdRegister> {
            return localVarFp.lookupOnChainIdRegistryEventByAddress(requestParameters.address, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnChainEventsApi - interface
 * @export
 * @interface OnChainEventsApi
 */
export interface OnChainEventsApiInterface {
    /**
     * 
     * @summary Fetch a list of on-chain events provided by an FID
     * @param {OnChainEventsApiFetchUserOnChainEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainEventsApiInterface
     * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)
     * 
     */
    fetchUserOnChainEvents(requestParameters: OnChainEventsApiFetchUserOnChainEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchUserOnChainEvents200Response>;

    /**
     * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead
     * @summary Fetch a list of signers provided by an FID
     * @param {OnChainEventsApiFetchUserOnChainSignersEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainEventsApiInterface
     * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)
     * 
     */
    fetchUserOnChainSignersEvents(requestParameters: OnChainEventsApiFetchUserOnChainSignersEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchUserOnChainSignersEvents200Response>;

    /**
     * 
     * @summary Fetch an on chain ID Registry Event for a given Address
     * @param {OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainEventsApiInterface
     * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)
     * 
     */
    lookupOnChainIdRegistryEventByAddress(requestParameters: OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<OnChainEventIdRegister>;

}

/**
 * Request parameters for fetchUserOnChainEvents operation in OnChainEventsApi.
 * @export
 * @interface OnChainEventsApiFetchUserOnChainEventsRequest
 */
export interface OnChainEventsApiFetchUserOnChainEventsRequest {
    /**
     * The FID being requested
     * 
     * 
     * 
     * @type {number}
     * @memberof OnChainEventsApiFetchUserOnChainEvents
     */
    readonly fid: number

    /**
     * The numeric of string value of the event type being requested.
     * 
     * 
     * 
     * @type {OnChainEventType}
     * @memberof OnChainEventsApiFetchUserOnChainEvents
     */
    readonly event_type: OnChainEventType
}

/**
 * Request parameters for fetchUserOnChainSignersEvents operation in OnChainEventsApi.
 * @export
 * @interface OnChainEventsApiFetchUserOnChainSignersEventsRequest
 */
export interface OnChainEventsApiFetchUserOnChainSignersEventsRequest {
    /**
     * The FID being requested
     * 
     * 
     * 
     * @type {number}
     * @memberof OnChainEventsApiFetchUserOnChainSignersEvents
     */
    readonly fid: number

    /**
     * The optional key of signer
     * 
     * 
     * 
     * @type {string}
     * @memberof OnChainEventsApiFetchUserOnChainSignersEvents
     */
    readonly signer?: string
}

/**
 * Request parameters for lookupOnChainIdRegistryEventByAddress operation in OnChainEventsApi.
 * @export
 * @interface OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest
 */
export interface OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest {
    /**
     * The ETH address being requested
     * 
     * 
     * 
     * @type {string}
     * @memberof OnChainEventsApiLookupOnChainIdRegistryEventByAddress
     */
    readonly address: string
}

/**
 * OnChainEventsApi - object-oriented interface
 * @export
 * @class OnChainEventsApi
 * @extends {BaseAPI}
 */
export class OnChainEventsApi extends BaseAPI implements OnChainEventsApiInterface {
    /**
     * 
     * @summary Fetch a list of on-chain events provided by an FID
     * @param {OnChainEventsApiFetchUserOnChainEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainEventsApi
     * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)
     * 
     */
    public fetchUserOnChainEvents(requestParameters: OnChainEventsApiFetchUserOnChainEventsRequest, options?: RawAxiosRequestConfig) {
        return OnChainEventsApiFp(this.configuration).fetchUserOnChainEvents(requestParameters.fid, requestParameters.event_type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead
     * @summary Fetch a list of signers provided by an FID
     * @param {OnChainEventsApiFetchUserOnChainSignersEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainEventsApi
     * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)
     * 
     */
    public fetchUserOnChainSignersEvents(requestParameters: OnChainEventsApiFetchUserOnChainSignersEventsRequest, options?: RawAxiosRequestConfig) {
        return OnChainEventsApiFp(this.configuration).fetchUserOnChainSignersEvents(requestParameters.fid, requestParameters.signer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch an on chain ID Registry Event for a given Address
     * @param {OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainEventsApi
     * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)
     * 
     */
    public lookupOnChainIdRegistryEventByAddress(requestParameters: OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest, options?: RawAxiosRequestConfig) {
        return OnChainEventsApiFp(this.configuration).lookupOnChainIdRegistryEventByAddress(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }
}

