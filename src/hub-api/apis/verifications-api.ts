/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { FetchVerificationsByFid200Response } from '../models';
/**
 * VerificationsApi - axios parameter creator
 * @export
 */
export const VerificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Provided by an FID
         * @param {number} fid The FID being requested 
         * @param {string} [address] The optional ETH address to filter by 
         * @param {number} [page_size] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [page_token] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)
         * 
         */
        fetchVerificationsByFid: async (fid: number, address?: string, page_size?: number, reverse?: boolean, page_token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchVerificationsByFid', 'fid', fid)
            const localVarPath = `/v1/verificationsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['pageSize'] = page_size;
            }

            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }

            if (page_token !== undefined) {
                localVarQueryParameter['pageToken'] = page_token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationsApi - functional programming interface
 * @export
 */
export const VerificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Provided by an FID
         * @param {number} fid The FID being requested 
         * @param {string} [address] The optional ETH address to filter by 
         * @param {number} [page_size] Maximum number of messages to return in a single response 
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first 
         * @param {string} [page_token] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)
         * 
         */
        async fetchVerificationsByFid(fid: number, address?: string, page_size?: number, reverse?: boolean, page_token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchVerificationsByFid200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchVerificationsByFid(fid, address, page_size, reverse, page_token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerificationsApi.fetchVerificationsByFid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VerificationsApi - factory interface
 * @export
 */
export const VerificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Provided by an FID
         * @param {VerificationsApiFetchVerificationsByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)
         * 
         */
        fetchVerificationsByFid(requestParameters: VerificationsApiFetchVerificationsByFidRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchVerificationsByFid200Response> {
            return localVarFp.fetchVerificationsByFid(requestParameters.fid, requestParameters.address, requestParameters.page_size, requestParameters.reverse, requestParameters.page_token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerificationsApi - interface
 * @export
 * @interface VerificationsApi
 */
export interface VerificationsApiInterface {
    /**
     * 
     * @summary Provided by an FID
     * @param {VerificationsApiFetchVerificationsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApiInterface
     * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)
     * 
     */
    fetchVerificationsByFid(requestParameters: VerificationsApiFetchVerificationsByFidRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchVerificationsByFid200Response>;

}

/**
 * Request parameters for fetchVerificationsByFid operation in VerificationsApi.
 * @export
 * @interface VerificationsApiFetchVerificationsByFidRequest
 */
export interface VerificationsApiFetchVerificationsByFidRequest {
    /**
     * The FID being requested
     * 
     * 
     * 
     * @type {number}
     * @memberof VerificationsApiFetchVerificationsByFid
     */
    readonly fid: number

    /**
     * The optional ETH address to filter by
     * 
     * 
     * 
     * @type {string}
     * @memberof VerificationsApiFetchVerificationsByFid
     */
    readonly address?: string

    /**
     * Maximum number of messages to return in a single response
     * 
     * 
     * 
     * @type {number}
     * @memberof VerificationsApiFetchVerificationsByFid
     */
    readonly page_size?: number

    /**
     * Reverse the sort order, returning latest messages first
     * 
     * 
     * 
     * @type {boolean}
     * @memberof VerificationsApiFetchVerificationsByFid
     */
    readonly reverse?: boolean

    /**
     * The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     * 
     * 
     * 
     * @type {string}
     * @memberof VerificationsApiFetchVerificationsByFid
     */
    readonly page_token?: string
}

/**
 * VerificationsApi - object-oriented interface
 * @export
 * @class VerificationsApi
 * @extends {BaseAPI}
 */
export class VerificationsApi extends BaseAPI implements VerificationsApiInterface {
    /**
     * 
     * @summary Provided by an FID
     * @param {VerificationsApiFetchVerificationsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApi
     * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)
     * 
     */
    public fetchVerificationsByFid(requestParameters: VerificationsApiFetchVerificationsByFidRequest, options?: RawAxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).fetchVerificationsByFid(requestParameters.fid, requestParameters.address, requestParameters.page_size, requestParameters.reverse, requestParameters.page_token, options).then((request) => request(this.axios, this.basePath));
    }
}

