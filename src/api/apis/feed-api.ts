/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BulkCastsResponse } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { FeedResponse } from '../models';
// @ts-ignore
import type { FetchFeedForYou400Response } from '../models';
/**
 * FeedApi - axios parameter creator
 * @export
 */
export const FeedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
         * @summary Chronologically
         * @param {number} fid FID of user whose recent casts you want to fetch 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [appFid] Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast 
         * @param {number} [viewerFid] FID of the user viewing the feed 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
         * @param {string} [cursor] Pagination cursor 
         * @param {boolean} [includeReplies] Include reply casts by the author in the response, true by default 
         * @param {string} [parentUrl] Parent URL to filter the feed; mutually exclusive with channel_id 
         * @param {string} [channelId] Channel ID to filter the feed; mutually exclusive with parent_url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
         * 
         */
        fetchCastsForUser: async (fid: number, xNeynarExperimental?: boolean, appFid?: number, viewerFid?: number, limit?: number, cursor?: string, includeReplies?: boolean, parentUrl?: string, channelId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchCastsForUser', 'fid', fid)
            const localVarPath = `/v2/farcaster/feed/user/casts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (appFid !== undefined) {
                localVarQueryParameter['app_fid'] = appFid;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (includeReplies !== undefined) {
                localVarQueryParameter['include_replies'] = includeReplies;
            }

            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
         * @summary By filters
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {FetchFeedFeedTypeEnum} [feedType] Defaults to following (requires FID or address). If set to filter (requires filter_type) 
         * @param {FetchFeedFilterTypeEnum} [filterType] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id) 
         * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type 
         * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type. 
         * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type. 
         * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type. 
         * @param {boolean} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default. 
         * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \&#39;https://\&#39; if no protocol is included. Requires feed_type and filter_type. 
         * @param {Array<FetchFeedEmbedTypesEnum>} [embedTypes] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
         * 
         */
        fetchFeed: async (xNeynarExperimental?: boolean, feedType?: FetchFeedFeedTypeEnum, filterType?: FetchFeedFilterTypeEnum, fid?: number, fids?: string, parentUrl?: string, channelId?: string, membersOnly?: boolean, embedUrl?: string, embedTypes?: Array<FetchFeedEmbedTypesEnum>, withRecasts?: boolean, limit?: number, cursor?: string, viewerFid?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/farcaster/feed/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (feedType !== undefined) {
                localVarQueryParameter['feed_type'] = feedType;
            }

            if (filterType !== undefined) {
                localVarQueryParameter['filter_type'] = filterType;
            }

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (fids !== undefined) {
                localVarQueryParameter['fids'] = fids;
            }

            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (membersOnly !== undefined) {
                localVarQueryParameter['members_only'] = membersOnly;
            }

            if (embedUrl !== undefined) {
                localVarQueryParameter['embed_url'] = embedUrl;
            }

            if (embedTypes) {
                localVarQueryParameter['embed_types'] = embedTypes;
            }

            if (withRecasts !== undefined) {
                localVarQueryParameter['with_recasts'] = withRecasts;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed based on channel IDs
         * @summary By channel IDs
         * @param {string} channelIds Comma separated list of up to 10 channel IDs e.g. neynar,farcaster 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {boolean} [withReplies] Include replies in the response, false by default 
         * @param {boolean} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default. 
         * @param {string} [fids] Comma separated list of FIDs to filter the feed by, up to 10 at a time 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {boolean} [shouldModerate] If true, only casts that have been liked by the moderator (if one exists) will be returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
         * 
         */
        fetchFeedByChannelIds: async (channelIds: string, xNeynarExperimental?: boolean, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, membersOnly?: boolean, fids?: string, limit?: number, cursor?: string, shouldModerate?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelIds' is not null or undefined
            assertParamExists('fetchFeedByChannelIds', 'channelIds', channelIds)
            const localVarPath = `/v2/farcaster/feed/channels/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (channelIds !== undefined) {
                localVarQueryParameter['channel_ids'] = channelIds;
            }

            if (withRecasts !== undefined) {
                localVarQueryParameter['with_recasts'] = withRecasts;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (withReplies !== undefined) {
                localVarQueryParameter['with_replies'] = withReplies;
            }

            if (membersOnly !== undefined) {
                localVarQueryParameter['members_only'] = membersOnly;
            }

            if (fids !== undefined) {
                localVarQueryParameter['fids'] = fids;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (shouldModerate !== undefined) {
                localVarQueryParameter['should_moderate'] = shouldModerate;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed based on parent URLs
         * @summary By parent URLs
         * @param {string} parentUrls Comma separated list of parent_urls 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {boolean} [withReplies] Include replies in the response, false by default 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
         * 
         */
        fetchFeedByParentUrls: async (parentUrls: string, xNeynarExperimental?: boolean, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentUrls' is not null or undefined
            assertParamExists('fetchFeedByParentUrls', 'parentUrls', parentUrls)
            const localVarPath = `/v2/farcaster/feed/parent_urls/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (parentUrls !== undefined) {
                localVarQueryParameter['parent_urls'] = parentUrls;
            }

            if (withRecasts !== undefined) {
                localVarQueryParameter['with_recasts'] = withRecasts;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (withReplies !== undefined) {
                localVarQueryParameter['with_replies'] = withReplies;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized For You feed for a user
         * @summary For you
         * @param {number} fid FID of user whose feed you want to create 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FetchFeedForYouProviderEnum} [provider] The provider of the For You feed. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor. 
         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
         * 
         */
        fetchFeedForYou: async (fid: number, xNeynarExperimental?: boolean, viewerFid?: number, provider?: FetchFeedForYouProviderEnum, limit?: number, cursor?: string, providerMetadata?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchFeedForYou', 'fid', fid)
            const localVarPath = `/v2/farcaster/feed/for_you/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (providerMetadata !== undefined) {
                localVarQueryParameter['provider_metadata'] = providerMetadata;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed of casts with mini apps, reverse chronological order
         * @summary Casts with mini apps
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
         * 
         */
        fetchFramesOnlyFeed: async (xNeynarExperimental?: boolean, limit?: number, viewerFid?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/farcaster/feed/frames/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary 10 most popular casts
         * @param {number} fid FID of user whose feed you want to create 
         * @param {number} [viewerFid] The unique identifier of a farcaster user or app (unsigned integer) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
         * 
         */
        fetchPopularCastsByUser: async (fid: number, viewerFid?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchPopularCastsByUser', 'fid', fid)
            const localVarPath = `/v2/farcaster/feed/user/popular/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Replies and recasts
         * @param {number} fid FID of user whose replies and recasts you want to fetch 
         * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] Filter to fetch only replies or recasts 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
         * 
         */
        fetchRepliesAndRecastsForUser: async (fid: number, filter?: FetchRepliesAndRecastsForUserFilterEnum, limit?: number, cursor?: string, viewerFid?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchRepliesAndRecastsForUser', 'fid', fid)
            const localVarPath = `/v2/farcaster/feed/user/replies_and_recasts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
         * @summary Trending feeds
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
         * @param {string} [cursor] Pagination cursor 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FetchTrendingFeedTimeWindowEnum} [timeWindow] Time window for trending casts (7d window for channel feeds only) 
         * @param {string} [channelId] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both. 
         * @param {string} [parentUrl] Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both. 
         * @param {FetchTrendingFeedProviderEnum} [provider] The provider of the trending casts feed. 
         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
         * 
         */
        fetchTrendingFeed: async (xNeynarExperimental?: boolean, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: FetchTrendingFeedTimeWindowEnum, channelId?: string, parentUrl?: string, provider?: FetchTrendingFeedProviderEnum, providerMetadata?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/farcaster/feed/trending/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (timeWindow !== undefined) {
                localVarQueryParameter['time_window'] = timeWindow;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (providerMetadata !== undefined) {
                localVarQueryParameter['provider_metadata'] = providerMetadata;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed based on who a user is following
         * @summary Following
         * @param {number} fid FID of user whose feed you want to create 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
         * 
         */
        fetchUserFollowingFeed: async (fid: number, xNeynarExperimental?: boolean, viewerFid?: number, withRecasts?: boolean, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchUserFollowingFeed', 'fid', fid)
            const localVarPath = `/v2/farcaster/feed/following/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (withRecasts !== undefined) {
                localVarQueryParameter['with_recasts'] = withRecasts;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedApi - functional programming interface
 * @export
 */
export const FeedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
         * @summary Chronologically
         * @param {number} fid FID of user whose recent casts you want to fetch 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [appFid] Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast 
         * @param {number} [viewerFid] FID of the user viewing the feed 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
         * @param {string} [cursor] Pagination cursor 
         * @param {boolean} [includeReplies] Include reply casts by the author in the response, true by default 
         * @param {string} [parentUrl] Parent URL to filter the feed; mutually exclusive with channel_id 
         * @param {string} [channelId] Channel ID to filter the feed; mutually exclusive with parent_url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
         * 
         */
        async fetchCastsForUser(fid: number, xNeynarExperimental?: boolean, appFid?: number, viewerFid?: number, limit?: number, cursor?: string, includeReplies?: boolean, parentUrl?: string, channelId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastsForUser(fid, xNeynarExperimental, appFid, viewerFid, limit, cursor, includeReplies, parentUrl, channelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchCastsForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
         * @summary By filters
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {FetchFeedFeedTypeEnum} [feedType] Defaults to following (requires FID or address). If set to filter (requires filter_type) 
         * @param {FetchFeedFilterTypeEnum} [filterType] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id) 
         * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type 
         * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type. 
         * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type. 
         * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type. 
         * @param {boolean} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default. 
         * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \&#39;https://\&#39; if no protocol is included. Requires feed_type and filter_type. 
         * @param {Array<FetchFeedEmbedTypesEnum>} [embedTypes] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
         * 
         */
        async fetchFeed(xNeynarExperimental?: boolean, feedType?: FetchFeedFeedTypeEnum, filterType?: FetchFeedFilterTypeEnum, fid?: number, fids?: string, parentUrl?: string, channelId?: string, membersOnly?: boolean, embedUrl?: string, embedTypes?: Array<FetchFeedEmbedTypesEnum>, withRecasts?: boolean, limit?: number, cursor?: string, viewerFid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeed(xNeynarExperimental, feedType, filterType, fid, fids, parentUrl, channelId, membersOnly, embedUrl, embedTypes, withRecasts, limit, cursor, viewerFid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed based on channel IDs
         * @summary By channel IDs
         * @param {string} channelIds Comma separated list of up to 10 channel IDs e.g. neynar,farcaster 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {boolean} [withReplies] Include replies in the response, false by default 
         * @param {boolean} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default. 
         * @param {string} [fids] Comma separated list of FIDs to filter the feed by, up to 10 at a time 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {boolean} [shouldModerate] If true, only casts that have been liked by the moderator (if one exists) will be returned. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
         * 
         */
        async fetchFeedByChannelIds(channelIds: string, xNeynarExperimental?: boolean, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, membersOnly?: boolean, fids?: string, limit?: number, cursor?: string, shouldModerate?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedByChannelIds(channelIds, xNeynarExperimental, withRecasts, viewerFid, withReplies, membersOnly, fids, limit, cursor, shouldModerate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchFeedByChannelIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed based on parent URLs
         * @summary By parent URLs
         * @param {string} parentUrls Comma separated list of parent_urls 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {boolean} [withReplies] Include replies in the response, false by default 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
         * 
         */
        async fetchFeedByParentUrls(parentUrls: string, xNeynarExperimental?: boolean, withRecasts?: boolean, viewerFid?: number, withReplies?: boolean, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedByParentUrls(parentUrls, xNeynarExperimental, withRecasts, viewerFid, withReplies, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchFeedByParentUrls']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a personalized For You feed for a user
         * @summary For you
         * @param {number} fid FID of user whose feed you want to create 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FetchFeedForYouProviderEnum} [provider] The provider of the For You feed. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor. 
         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
         * 
         */
        async fetchFeedForYou(fid: number, xNeynarExperimental?: boolean, viewerFid?: number, provider?: FetchFeedForYouProviderEnum, limit?: number, cursor?: string, providerMetadata?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedForYou(fid, xNeynarExperimental, viewerFid, provider, limit, cursor, providerMetadata, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchFeedForYou']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed of casts with mini apps, reverse chronological order
         * @summary Casts with mini apps
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
         * 
         */
        async fetchFramesOnlyFeed(xNeynarExperimental?: boolean, limit?: number, viewerFid?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFramesOnlyFeed(xNeynarExperimental, limit, viewerFid, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchFramesOnlyFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary 10 most popular casts
         * @param {number} fid FID of user whose feed you want to create 
         * @param {number} [viewerFid] The unique identifier of a farcaster user or app (unsigned integer) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
         * 
         */
        async fetchPopularCastsByUser(fid: number, viewerFid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkCastsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPopularCastsByUser(fid, viewerFid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchPopularCastsByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Replies and recasts
         * @param {number} fid FID of user whose replies and recasts you want to fetch 
         * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] Filter to fetch only replies or recasts 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
         * 
         */
        async fetchRepliesAndRecastsForUser(fid: number, filter?: FetchRepliesAndRecastsForUserFilterEnum, limit?: number, cursor?: string, viewerFid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRepliesAndRecastsForUser(fid, filter, limit, cursor, viewerFid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchRepliesAndRecastsForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
         * @summary Trending feeds
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
         * @param {string} [cursor] Pagination cursor 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {FetchTrendingFeedTimeWindowEnum} [timeWindow] Time window for trending casts (7d window for channel feeds only) 
         * @param {string} [channelId] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both. 
         * @param {string} [parentUrl] Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both. 
         * @param {FetchTrendingFeedProviderEnum} [provider] The provider of the trending casts feed. 
         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
         * 
         */
        async fetchTrendingFeed(xNeynarExperimental?: boolean, limit?: number, cursor?: string, viewerFid?: number, timeWindow?: FetchTrendingFeedTimeWindowEnum, channelId?: string, parentUrl?: string, provider?: FetchTrendingFeedProviderEnum, providerMetadata?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchTrendingFeed(xNeynarExperimental, limit, cursor, viewerFid, timeWindow, channelId, parentUrl, provider, providerMetadata, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchTrendingFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed based on who a user is following
         * @summary Following
         * @param {number} fid FID of user whose feed you want to create 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {boolean} [withRecasts] Include recasts in the response, true by default 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
         * 
         */
        async fetchUserFollowingFeed(fid: number, xNeynarExperimental?: boolean, viewerFid?: number, withRecasts?: boolean, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowingFeed(fid, xNeynarExperimental, viewerFid, withRecasts, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedApi.fetchUserFollowingFeed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeedApi - factory interface
 * @export
 */
export const FeedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedApiFp(configuration)
    return {
        /**
         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
         * @summary Chronologically
         * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
         * 
         */
        fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchCastsForUser(requestParameters.fid, requestParameters.xNeynarExperimental, requestParameters.appFid, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.includeReplies, requestParameters.parentUrl, requestParameters.channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
         * @summary By filters
         * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
         * 
         */
        fetchFeed(requestParameters: FeedApiFetchFeedRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchFeed(requestParameters.xNeynarExperimental, requestParameters.feedType, requestParameters.filterType, requestParameters.fid, requestParameters.fids, requestParameters.parentUrl, requestParameters.channelId, requestParameters.membersOnly, requestParameters.embedUrl, requestParameters.embedTypes, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed based on channel IDs
         * @summary By channel IDs
         * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
         * 
         */
        fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchFeedByChannelIds(requestParameters.channelIds, requestParameters.xNeynarExperimental, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.membersOnly, requestParameters.fids, requestParameters.limit, requestParameters.cursor, requestParameters.shouldModerate, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed based on parent URLs
         * @summary By parent URLs
         * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
         * 
         */
        fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchFeedByParentUrls(requestParameters.parentUrls, requestParameters.xNeynarExperimental, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized For You feed for a user
         * @summary For you
         * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
         * 
         */
        fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchFeedForYou(requestParameters.fid, requestParameters.xNeynarExperimental, requestParameters.viewerFid, requestParameters.provider, requestParameters.limit, requestParameters.cursor, requestParameters.providerMetadata, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed of casts with mini apps, reverse chronological order
         * @summary Casts with mini apps
         * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
         * 
         */
        fetchFramesOnlyFeed(requestParameters: FeedApiFetchFramesOnlyFeedRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchFramesOnlyFeed(requestParameters.xNeynarExperimental, requestParameters.limit, requestParameters.viewerFid, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary 10 most popular casts
         * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
         * 
         */
        fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkCastsResponse> {
            return localVarFp.fetchPopularCastsByUser(requestParameters.fid, requestParameters.viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Replies and recasts
         * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
         * 
         */
        fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchRepliesAndRecastsForUser(requestParameters.fid, requestParameters.filter, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
         * @summary Trending feeds
         * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
         * 
         */
        fetchTrendingFeed(requestParameters: FeedApiFetchTrendingFeedRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchTrendingFeed(requestParameters.xNeynarExperimental, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, requestParameters.timeWindow, requestParameters.channelId, requestParameters.parentUrl, requestParameters.provider, requestParameters.providerMetadata, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed based on who a user is following
         * @summary Following
         * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
         * 
         */
        fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse> {
            return localVarFp.fetchUserFollowingFeed(requestParameters.fid, requestParameters.xNeynarExperimental, requestParameters.viewerFid, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedApi - interface
 * @export
 * @interface FeedApi
 */
export interface FeedApiInterface {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     * 
     */
    fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     * 
     */
    fetchFeed(requestParameters?: FeedApiFetchFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     * 
     */
    fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     * 
     */
    fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     * 
     */
    fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch feed of casts with mini apps, reverse chronological order
     * @summary Casts with mini apps
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     * 
     */
    fetchFramesOnlyFeed(requestParameters?: FeedApiFetchFramesOnlyFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     * 
     */
    fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkCastsResponse>;

    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     * 
     */
    fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending feeds
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     * 
     */
    fetchTrendingFeed(requestParameters?: FeedApiFetchTrendingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     * 
     */
    fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;

}

/**
 * Request parameters for fetchCastsForUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchCastsForUserRequest
 */
export interface FeedApiFetchCastsForUserRequest {
    /**
     * FID of user whose recent casts you want to fetch
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly fid: number

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly appFid?: number

    /**
     * FID of the user viewing the feed
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly viewerFid?: number

    /**
     * Number of results to fetch (Default: 25, Maximum: 150)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly limit?: number

    /**
     * Pagination cursor
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly cursor?: string

    /**
     * Include reply casts by the author in the response, true by default
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly includeReplies?: boolean

    /**
     * Parent URL to filter the feed; mutually exclusive with channel_id
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly parentUrl?: string

    /**
     * Channel ID to filter the feed; mutually exclusive with parent_url
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly channelId?: string
}

/**
 * Request parameters for fetchFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedRequest
 */
export interface FeedApiFetchFeedRequest {
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Defaults to following (requires FID or address). If set to filter (requires filter_type)
     * 
     * 
     * 
     * @type {'following' | 'filter'}
     * @memberof FeedApiFetchFeed
     */
    readonly feedType?: FetchFeedFeedTypeEnum

    /**
     * Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * 
     * 
     * 
     * @type {'fids' | 'parent_url' | 'channel_id' | 'embed_url' | 'embed_types' | 'global_trending'}
     * @memberof FeedApiFetchFeed
     */
    readonly filterType?: FetchFeedFilterTypeEnum

    /**
     * (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly fid?: number

    /**
     * Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.
     * @acceptAs integer
     * @commaSeparated
     * 
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly fids?: string

    /**
     * Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly parentUrl?: string

    /**
     * Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly channelId?: string

    /**
     * Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly membersOnly?: boolean

    /**
     * Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \&#39;https://\&#39; if no protocol is included. Requires feed_type and filter_type.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly embedUrl?: string

    /**
     * Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.
     * 
     * 
     * 
     * @type {Array<'text' | 'image' | 'video' | 'audio' | 'text/html' | 'text/plain' | 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp' | 'image/svg+xml' | 'image/heif' | 'video/mp4' | 'video/quicktime' | 'audio/mpeg' | 'application/pdf' | 'application/json' | 'application/x-mpegurl'>}
     * @memberof FeedApiFetchFeed
     */
    readonly embedTypes?: Array<FetchFeedEmbedTypesEnum>

    /**
     * Include recasts in the response, true by default
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly withRecasts?: boolean

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly cursor?: string

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly viewerFid?: number
}

/**
 * Request parameters for fetchFeedByChannelIds operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedByChannelIdsRequest
 */
export interface FeedApiFetchFeedByChannelIdsRequest {
    /**
     * Comma separated list of up to 10 channel IDs e.g. neynar,farcaster
     * 
     * @commaSeparated
     * 
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly channelIds: string

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Include recasts in the response, true by default
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly withRecasts?: boolean

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly viewerFid?: number

    /**
     * Include replies in the response, false by default
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly withReplies?: boolean

    /**
     * Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly membersOnly?: boolean

    /**
     * Comma separated list of FIDs to filter the feed by, up to 10 at a time
     * @acceptAs integer
     * @commaSeparated
     * 
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly fids?: string

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly cursor?: string

    /**
     * If true, only casts that have been liked by the moderator (if one exists) will be returned.
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly shouldModerate?: boolean
}

/**
 * Request parameters for fetchFeedByParentUrls operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedByParentUrlsRequest
 */
export interface FeedApiFetchFeedByParentUrlsRequest {
    /**
     * Comma separated list of parent_urls
     * 
     * @commaSeparated
     * 
     * @type {string}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly parentUrls: string

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Include recasts in the response, true by default
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly withRecasts?: boolean

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly viewerFid?: number

    /**
     * Include replies in the response, false by default
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly withReplies?: boolean

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly cursor?: string
}

/**
 * Request parameters for fetchFeedForYou operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedForYouRequest
 */
export interface FeedApiFetchFeedForYouRequest {
    /**
     * FID of user whose feed you want to create
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly fid: number

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly viewerFid?: number

    /**
     * The provider of the For You feed.
     * 
     * 
     * 
     * @type {'neynar' | 'openrank' | 'mbd'}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly provider?: FetchFeedForYouProviderEnum

    /**
     * Number of results to fetch (Default: 25, Maximum: 50)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly cursor?: string

    /**
     * provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly providerMetadata?: string
}

/**
 * Request parameters for fetchFramesOnlyFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchFramesOnlyFeedRequest
 */
export interface FeedApiFetchFramesOnlyFeedRequest {
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly limit?: number

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly viewerFid?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly cursor?: string
}

/**
 * Request parameters for fetchPopularCastsByUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchPopularCastsByUserRequest
 */
export interface FeedApiFetchPopularCastsByUserRequest {
    /**
     * FID of user whose feed you want to create
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchPopularCastsByUser
     */
    readonly fid: number

    /**
     * The unique identifier of a farcaster user or app (unsigned integer)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchPopularCastsByUser
     */
    readonly viewerFid?: number
}

/**
 * Request parameters for fetchRepliesAndRecastsForUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchRepliesAndRecastsForUserRequest
 */
export interface FeedApiFetchRepliesAndRecastsForUserRequest {
    /**
     * FID of user whose replies and recasts you want to fetch
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly fid: number

    /**
     * Filter to fetch only replies or recasts
     * 
     * 
     * 
     * @type {'replies' | 'recasts' | 'all'}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly filter?: FetchRepliesAndRecastsForUserFilterEnum

    /**
     * Number of results to fetch (Default: 25, Maximum: 50)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly cursor?: string

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly viewerFid?: number
}

/**
 * Request parameters for fetchTrendingFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchTrendingFeedRequest
 */
export interface FeedApiFetchTrendingFeedRequest {
    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Number of results to fetch (Default: 10, Maximum: 10)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly limit?: number

    /**
     * Pagination cursor
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly cursor?: string

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly viewerFid?: number

    /**
     * Time window for trending casts (7d window for channel feeds only)
     * 
     * 
     * 
     * @type {'1h' | '6h' | '12h' | '24h' | '7d'}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly timeWindow?: FetchTrendingFeedTimeWindowEnum

    /**
     * Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly channelId?: string

    /**
     * Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly parentUrl?: string

    /**
     * The provider of the trending casts feed.
     * 
     * 
     * 
     * @type {'neynar' | 'openrank' | 'mbd'}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly provider?: FetchTrendingFeedProviderEnum

    /**
     * provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly providerMetadata?: string
}

/**
 * Request parameters for fetchUserFollowingFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchUserFollowingFeedRequest
 */
export interface FeedApiFetchUserFollowingFeedRequest {
    /**
     * FID of user whose feed you want to create
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly fid: number

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly viewerFid?: number

    /**
     * Include recasts in the response, true by default
     * 
     * 
     * 
     * @type {boolean}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly withRecasts?: boolean

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly cursor?: string
}

/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export class FeedApi extends BaseAPI implements FeedApiInterface {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     * 
     */
    public fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchCastsForUser(requestParameters.fid, requestParameters.xNeynarExperimental, requestParameters.appFid, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.includeReplies, requestParameters.parentUrl, requestParameters.channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     * 
     */
    public fetchFeed(requestParameters: FeedApiFetchFeedRequest = {}, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchFeed(requestParameters.xNeynarExperimental, requestParameters.feedType, requestParameters.filterType, requestParameters.fid, requestParameters.fids, requestParameters.parentUrl, requestParameters.channelId, requestParameters.membersOnly, requestParameters.embedUrl, requestParameters.embedTypes, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     * 
     */
    public fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchFeedByChannelIds(requestParameters.channelIds, requestParameters.xNeynarExperimental, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.membersOnly, requestParameters.fids, requestParameters.limit, requestParameters.cursor, requestParameters.shouldModerate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     * 
     */
    public fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchFeedByParentUrls(requestParameters.parentUrls, requestParameters.xNeynarExperimental, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     * 
     */
    public fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchFeedForYou(requestParameters.fid, requestParameters.xNeynarExperimental, requestParameters.viewerFid, requestParameters.provider, requestParameters.limit, requestParameters.cursor, requestParameters.providerMetadata, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch feed of casts with mini apps, reverse chronological order
     * @summary Casts with mini apps
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     * 
     */
    public fetchFramesOnlyFeed(requestParameters: FeedApiFetchFramesOnlyFeedRequest = {}, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchFramesOnlyFeed(requestParameters.xNeynarExperimental, requestParameters.limit, requestParameters.viewerFid, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     * 
     */
    public fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchPopularCastsByUser(requestParameters.fid, requestParameters.viewerFid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     * 
     */
    public fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchRepliesAndRecastsForUser(requestParameters.fid, requestParameters.filter, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending feeds
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     * 
     */
    public fetchTrendingFeed(requestParameters: FeedApiFetchTrendingFeedRequest = {}, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchTrendingFeed(requestParameters.xNeynarExperimental, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, requestParameters.timeWindow, requestParameters.channelId, requestParameters.parentUrl, requestParameters.provider, requestParameters.providerMetadata, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     * 
     */
    public fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig) {
        return FeedApiFp(this.configuration).fetchUserFollowingFeed(requestParameters.fid, requestParameters.xNeynarExperimental, requestParameters.viewerFid, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const FetchFeedFeedTypeEnum = {
    Following: 'following',
    Filter: 'filter'
} as const;
export type FetchFeedFeedTypeEnum = typeof FetchFeedFeedTypeEnum[keyof typeof FetchFeedFeedTypeEnum];
/**
 * @export
 */
export const FetchFeedFilterTypeEnum = {
    Fids: 'fids',
    ParentUrl: 'parent_url',
    ChannelId: 'channel_id',
    EmbedUrl: 'embed_url',
    EmbedTypes: 'embed_types',
    GlobalTrending: 'global_trending'
} as const;
export type FetchFeedFilterTypeEnum = typeof FetchFeedFilterTypeEnum[keyof typeof FetchFeedFilterTypeEnum];
/**
 * @export
 */
export const FetchFeedEmbedTypesEnum = {
    Text: 'text',
    Image: 'image',
    Video: 'video',
    Audio: 'audio',
    TextHtml: 'text/html',
    TextPlain: 'text/plain',
    ImageJpeg: 'image/jpeg',
    ImagePng: 'image/png',
    ImageGif: 'image/gif',
    ImageWebp: 'image/webp',
    ImageSvgxml: 'image/svg+xml',
    ImageHeif: 'image/heif',
    VideoMp4: 'video/mp4',
    VideoQuicktime: 'video/quicktime',
    AudioMpeg: 'audio/mpeg',
    ApplicationPdf: 'application/pdf',
    ApplicationJson: 'application/json',
    ApplicationXMpegurl: 'application/x-mpegurl'
} as const;
export type FetchFeedEmbedTypesEnum = typeof FetchFeedEmbedTypesEnum[keyof typeof FetchFeedEmbedTypesEnum];
/**
 * @export
 */
export const FetchFeedForYouProviderEnum = {
    Neynar: 'neynar',
    Openrank: 'openrank',
    Mbd: 'mbd'
} as const;
export type FetchFeedForYouProviderEnum = typeof FetchFeedForYouProviderEnum[keyof typeof FetchFeedForYouProviderEnum];
/**
 * @export
 */
export const FetchRepliesAndRecastsForUserFilterEnum = {
    Replies: 'replies',
    Recasts: 'recasts',
    All: 'all'
} as const;
export type FetchRepliesAndRecastsForUserFilterEnum = typeof FetchRepliesAndRecastsForUserFilterEnum[keyof typeof FetchRepliesAndRecastsForUserFilterEnum];
/**
 * @export
 */
export const FetchTrendingFeedTimeWindowEnum = {
    _1h: '1h',
    _6h: '6h',
    _12h: '12h',
    _24h: '24h',
    _7d: '7d'
} as const;
export type FetchTrendingFeedTimeWindowEnum = typeof FetchTrendingFeedTimeWindowEnum[keyof typeof FetchTrendingFeedTimeWindowEnum];
/**
 * @export
 */
export const FetchTrendingFeedProviderEnum = {
    Neynar: 'neynar',
    Openrank: 'openrank',
    Mbd: 'mbd'
} as const;
export type FetchTrendingFeedProviderEnum = typeof FetchTrendingFeedProviderEnum[keyof typeof FetchTrendingFeedProviderEnum];
