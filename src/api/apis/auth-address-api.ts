/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.2.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { RegisterAuthAddressDeveloperManaged200Response } from '../models';
// @ts-ignore
import type { RegisterAuthAddressDeveloperManagedRequest } from '../models';
/**
 * AuthAddressApi - axios parameter creator
 * @export
 */
export const AuthAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
         * @summary Register Auth Address (Developer Managed)
         * @param {RegisterAuthAddressDeveloperManagedRequest} registerAuthAddressDeveloperManagedRequest  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterAuthAddressDeveloperManaged200Response>} A promise that resolves to a `RegisterAuthAddressDeveloperManaged200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-auth-address-developer-managed)
         * 
         */
        registerAuthAddressDeveloperManaged: async (registerAuthAddressDeveloperManagedRequest: RegisterAuthAddressDeveloperManagedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerAuthAddressDeveloperManagedRequest' is not null or undefined
            assertParamExists('registerAuthAddressDeveloperManaged', 'registerAuthAddressDeveloperManagedRequest', registerAuthAddressDeveloperManagedRequest)
            const localVarPath = `/v2/farcaster/auth_address/developer_managed/signed_key/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerAuthAddressDeveloperManagedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthAddressApi - functional programming interface
 * @export
 */
export const AuthAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
         * @summary Register Auth Address (Developer Managed)
         * @param {RegisterAuthAddressDeveloperManagedRequest} registerAuthAddressDeveloperManagedRequest  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterAuthAddressDeveloperManaged200Response>} A promise that resolves to a `RegisterAuthAddressDeveloperManaged200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-auth-address-developer-managed)
         * 
         */
        async registerAuthAddressDeveloperManaged(registerAuthAddressDeveloperManagedRequest: RegisterAuthAddressDeveloperManagedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterAuthAddressDeveloperManaged200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAuthAddressDeveloperManaged(registerAuthAddressDeveloperManagedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthAddressApi.registerAuthAddressDeveloperManaged']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthAddressApi - factory interface
 * @export
 */
export const AuthAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthAddressApiFp(configuration)
    return {
        /**
         * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
         * @summary Register Auth Address (Developer Managed)
         * @param {AuthAddressApiRegisterAuthAddressDeveloperManagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterAuthAddressDeveloperManaged200Response>} A promise that resolves to a `RegisterAuthAddressDeveloperManaged200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-auth-address-developer-managed)
         * 
         */
        registerAuthAddressDeveloperManaged(requestParameters: AuthAddressApiRegisterAuthAddressDeveloperManagedRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterAuthAddressDeveloperManaged200Response> {
            return localVarFp.registerAuthAddressDeveloperManaged(requestParameters.registerAuthAddressDeveloperManagedRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthAddressApi - interface
 * @export
 * @interface AuthAddressApi
 */
export interface AuthAddressApiInterface {
    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Auth Address (Developer Managed)
     * @param {AuthAddressApiRegisterAuthAddressDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApiInterface
     * @returns {Promise<RegisterAuthAddressDeveloperManaged200Response>} A promise that resolves to a `RegisterAuthAddressDeveloperManaged200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-auth-address-developer-managed)
     * 
     */
    registerAuthAddressDeveloperManaged(requestParameters: AuthAddressApiRegisterAuthAddressDeveloperManagedRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterAuthAddressDeveloperManaged200Response>;

}

/**
 * Request parameters for registerAuthAddressDeveloperManaged operation in AuthAddressApi.
 * @export
 * @interface AuthAddressApiRegisterAuthAddressDeveloperManagedRequest
 */
export interface AuthAddressApiRegisterAuthAddressDeveloperManagedRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {RegisterAuthAddressDeveloperManagedRequest}
     * @memberof AuthAddressApiRegisterAuthAddressDeveloperManaged
     */
    readonly registerAuthAddressDeveloperManagedRequest: RegisterAuthAddressDeveloperManagedRequest
}

/**
 * AuthAddressApi - object-oriented interface
 * @export
 * @class AuthAddressApi
 * @extends {BaseAPI}
 */
export class AuthAddressApi extends BaseAPI implements AuthAddressApiInterface {
    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Auth Address (Developer Managed)
     * @param {AuthAddressApiRegisterAuthAddressDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApi
     * @returns {Promise<RegisterAuthAddressDeveloperManaged200Response>} A promise that resolves to a `RegisterAuthAddressDeveloperManaged200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-auth-address-developer-managed)
     * 
     */
    public registerAuthAddressDeveloperManaged(requestParameters: AuthAddressApiRegisterAuthAddressDeveloperManagedRequest, options?: RawAxiosRequestConfig) {
        return AuthAddressApiFp(this.configuration).registerAuthAddressDeveloperManaged(requestParameters.registerAuthAddressDeveloperManagedRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

