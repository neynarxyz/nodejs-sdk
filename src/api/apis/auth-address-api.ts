/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.31.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { RegisterAuthAddressDeveloperManagedSignedKeyReqBody } from '../models';
// @ts-ignore
import type { RegisterSignedKeyForDeveloperManagedAuthAddress200Response } from '../models';
/**
 * AuthAddressApi - axios parameter creator
 * @export
 */
export const AuthAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the status of a developer managed auth address by auth address
         * @summary Status by auth address
         * @param {string} address Ethereum address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
         * 
         */
        lookupDeveloperManagedAuthAddress: async (address: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('lookupDeveloperManagedAuthAddress', 'address', address)
            const localVarPath = `/v2/farcaster/auth_address/developer_managed/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
         * @summary Register Signed Key
         * @param {RegisterAuthAddressDeveloperManagedSignedKeyReqBody} registerAuthAddressDeveloperManagedSignedKeyReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
         * 
         */
        registerSignedKeyForDeveloperManagedAuthAddress: async (registerAuthAddressDeveloperManagedSignedKeyReqBody: RegisterAuthAddressDeveloperManagedSignedKeyReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerAuthAddressDeveloperManagedSignedKeyReqBody' is not null or undefined
            assertParamExists('registerSignedKeyForDeveloperManagedAuthAddress', 'registerAuthAddressDeveloperManagedSignedKeyReqBody', registerAuthAddressDeveloperManagedSignedKeyReqBody)
            const localVarPath = `/v2/farcaster/auth_address/developer_managed/signed_key/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerAuthAddressDeveloperManagedSignedKeyReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthAddressApi - functional programming interface
 * @export
 */
export const AuthAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches the status of a developer managed auth address by auth address
         * @summary Status by auth address
         * @param {string} address Ethereum address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
         * 
         */
        async lookupDeveloperManagedAuthAddress(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupDeveloperManagedAuthAddress(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthAddressApi.lookupDeveloperManagedAuthAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
         * @summary Register Signed Key
         * @param {RegisterAuthAddressDeveloperManagedSignedKeyReqBody} registerAuthAddressDeveloperManagedSignedKeyReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
         * 
         */
        async registerSignedKeyForDeveloperManagedAuthAddress(registerAuthAddressDeveloperManagedSignedKeyReqBody: RegisterAuthAddressDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSignedKeyForDeveloperManagedAuthAddress(registerAuthAddressDeveloperManagedSignedKeyReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthAddressApi.registerSignedKeyForDeveloperManagedAuthAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthAddressApi - factory interface
 * @export
 */
export const AuthAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthAddressApiFp(configuration)
    return {
        /**
         * Fetches the status of a developer managed auth address by auth address
         * @summary Status by auth address
         * @param {AuthAddressApiLookupDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
         * 
         */
        lookupDeveloperManagedAuthAddress(requestParameters: AuthAddressApiLookupDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response> {
            return localVarFp.lookupDeveloperManagedAuthAddress(requestParameters.address, options).then((request) => request(axios, basePath));
        },
        /**
         * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
         * @summary Register Signed Key
         * @param {AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
         * 
         */
        registerSignedKeyForDeveloperManagedAuthAddress(requestParameters: AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response> {
            return localVarFp.registerSignedKeyForDeveloperManagedAuthAddress(requestParameters.registerAuthAddressDeveloperManagedSignedKeyReqBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthAddressApi - interface
 * @export
 * @interface AuthAddressApi
 */
export interface AuthAddressApiInterface {
    /**
     * Fetches the status of a developer managed auth address by auth address
     * @summary Status by auth address
     * @param {AuthAddressApiLookupDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApiInterface
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
     * 
     */
    lookupDeveloperManagedAuthAddress(requestParameters: AuthAddressApiLookupDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>;

    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Signed Key
     * @param {AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApiInterface
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
     * 
     */
    registerSignedKeyForDeveloperManagedAuthAddress(requestParameters: AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>;

}

/**
 * Request parameters for lookupDeveloperManagedAuthAddress operation in AuthAddressApi.
 * @export
 * @interface AuthAddressApiLookupDeveloperManagedAuthAddressRequest
 */
export interface AuthAddressApiLookupDeveloperManagedAuthAddressRequest {
    /**
     * Ethereum address
     * 
     * 
     * 
     * @type {string}
     * @memberof AuthAddressApiLookupDeveloperManagedAuthAddress
     */
    readonly address: string
}

/**
 * Request parameters for registerSignedKeyForDeveloperManagedAuthAddress operation in AuthAddressApi.
 * @export
 * @interface AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest
 */
export interface AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {RegisterAuthAddressDeveloperManagedSignedKeyReqBody}
     * @memberof AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddress
     */
    readonly registerAuthAddressDeveloperManagedSignedKeyReqBody: RegisterAuthAddressDeveloperManagedSignedKeyReqBody
}

/**
 * AuthAddressApi - object-oriented interface
 * @export
 * @class AuthAddressApi
 * @extends {BaseAPI}
 */
export class AuthAddressApi extends BaseAPI implements AuthAddressApiInterface {
    /**
     * Fetches the status of a developer managed auth address by auth address
     * @summary Status by auth address
     * @param {AuthAddressApiLookupDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApi
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-auth-address)
     * 
     */
    public lookupDeveloperManagedAuthAddress(requestParameters: AuthAddressApiLookupDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig) {
        return AuthAddressApiFp(this.configuration).lookupDeveloperManagedAuthAddress(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allow apps to register an Ethereum addresses as authorized \"auth addresses\" for a user\'s Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
     * @summary Register Signed Key
     * @param {AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAddressApi
     * @returns {Promise<RegisterSignedKeyForDeveloperManagedAuthAddress200Response>} A promise that resolves to a `RegisterSignedKeyForDeveloperManagedAuthAddress200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address)
     * 
     */
    public registerSignedKeyForDeveloperManagedAuthAddress(requestParameters: AuthAddressApiRegisterSignedKeyForDeveloperManagedAuthAddressRequest, options?: RawAxiosRequestConfig) {
        return AuthAddressApiFp(this.configuration).registerSignedKeyForDeveloperManagedAuthAddress(requestParameters.registerAuthAddressDeveloperManagedSignedKeyReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}

