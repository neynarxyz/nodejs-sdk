/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.25.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AppHostGetEventResponse } from '../models';
// @ts-ignore
import type { AppHostPostEventReqBody } from '../models';
// @ts-ignore
import type { AppHostPostEventResponse } from '../models';
// @ts-ignore
import type { AppHostUserStateResponse } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
/**
 * AppHostApi - axios parameter creator
 * @export
 */
export const AppHostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns event object for app host events. Used if the app host intends to sign the event message instead of using Neynar-hosted signers.
         * @summary Generate event
         * @param {string} appDomain The domain of the mini app 
         * @param {number} fid The FID of the user who initiated the event 
         * @param {AppHostGetEventEventEnum} event The type of event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostGetEventResponse>} A promise that resolves to a `AppHostGetEventResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-event)
         * 
         */
        appHostGetEvent: async (appDomain: string, fid: number, event: AppHostGetEventEventEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appDomain' is not null or undefined
            assertParamExists('appHostGetEvent', 'appDomain', appDomain)
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('appHostGetEvent', 'fid', fid)
            // verify required parameter 'event' is not null or undefined
            assertParamExists('appHostGetEvent', 'event', event)
            const localVarPath = `/v2/farcaster/app_host/user/event/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (appDomain !== undefined) {
                localVarQueryParameter['app_domain'] = appDomain;
            }

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current notification state for a specific user across all mini app domains in this app host. Shows which domains have notifications enabled.
         * @summary Enabled notifications
         * @param {number} fid The FID of the user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostUserStateResponse>} A promise that resolves to a `AppHostUserStateResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-user-state)
         * 
         */
        appHostGetUserState: async (fid: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('appHostGetUserState', 'fid', fid)
            const localVarPath = `/v2/farcaster/app_host/user/state/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post an app_host event to the domain\'s webhook. Events such as enabling or disabling notifications for a user. Provide either a signed message or the signer UUID of an authorized neynar-hosted signers.
         * @summary Send event
         * @param {AppHostPostEventReqBody} appHostPostEventReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostPostEventResponse>} A promise that resolves to a `AppHostPostEventResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-post-event)
         * 
         */
        appHostPostEvent: async (appHostPostEventReqBody: AppHostPostEventReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appHostPostEventReqBody' is not null or undefined
            assertParamExists('appHostPostEvent', 'appHostPostEventReqBody', appHostPostEventReqBody)
            const localVarPath = `/v2/farcaster/app_host/user/event/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appHostPostEventReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppHostApi - functional programming interface
 * @export
 */
export const AppHostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppHostApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns event object for app host events. Used if the app host intends to sign the event message instead of using Neynar-hosted signers.
         * @summary Generate event
         * @param {string} appDomain The domain of the mini app 
         * @param {number} fid The FID of the user who initiated the event 
         * @param {AppHostGetEventEventEnum} event The type of event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostGetEventResponse>} A promise that resolves to a `AppHostGetEventResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-event)
         * 
         */
        async appHostGetEvent(appDomain: string, fid: number, event: AppHostGetEventEventEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppHostGetEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appHostGetEvent(appDomain, fid, event, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppHostApi.appHostGetEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the current notification state for a specific user across all mini app domains in this app host. Shows which domains have notifications enabled.
         * @summary Enabled notifications
         * @param {number} fid The FID of the user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostUserStateResponse>} A promise that resolves to a `AppHostUserStateResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-user-state)
         * 
         */
        async appHostGetUserState(fid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppHostUserStateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appHostGetUserState(fid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppHostApi.appHostGetUserState']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post an app_host event to the domain\'s webhook. Events such as enabling or disabling notifications for a user. Provide either a signed message or the signer UUID of an authorized neynar-hosted signers.
         * @summary Send event
         * @param {AppHostPostEventReqBody} appHostPostEventReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostPostEventResponse>} A promise that resolves to a `AppHostPostEventResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-post-event)
         * 
         */
        async appHostPostEvent(appHostPostEventReqBody: AppHostPostEventReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppHostPostEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appHostPostEvent(appHostPostEventReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppHostApi.appHostPostEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppHostApi - factory interface
 * @export
 */
export const AppHostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppHostApiFp(configuration)
    return {
        /**
         * Returns event object for app host events. Used if the app host intends to sign the event message instead of using Neynar-hosted signers.
         * @summary Generate event
         * @param {AppHostApiAppHostGetEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostGetEventResponse>} A promise that resolves to a `AppHostGetEventResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-event)
         * 
         */
        appHostGetEvent(requestParameters: AppHostApiAppHostGetEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppHostGetEventResponse> {
            return localVarFp.appHostGetEvent(requestParameters.appDomain, requestParameters.fid, requestParameters.event, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current notification state for a specific user across all mini app domains in this app host. Shows which domains have notifications enabled.
         * @summary Enabled notifications
         * @param {AppHostApiAppHostGetUserStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostUserStateResponse>} A promise that resolves to a `AppHostUserStateResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-user-state)
         * 
         */
        appHostGetUserState(requestParameters: AppHostApiAppHostGetUserStateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppHostUserStateResponse> {
            return localVarFp.appHostGetUserState(requestParameters.fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Post an app_host event to the domain\'s webhook. Events such as enabling or disabling notifications for a user. Provide either a signed message or the signer UUID of an authorized neynar-hosted signers.
         * @summary Send event
         * @param {AppHostApiAppHostPostEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AppHostPostEventResponse>} A promise that resolves to a `AppHostPostEventResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-post-event)
         * 
         */
        appHostPostEvent(requestParameters: AppHostApiAppHostPostEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppHostPostEventResponse> {
            return localVarFp.appHostPostEvent(requestParameters.appHostPostEventReqBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppHostApi - interface
 * @export
 * @interface AppHostApi
 */
export interface AppHostApiInterface {
    /**
     * Returns event object for app host events. Used if the app host intends to sign the event message instead of using Neynar-hosted signers.
     * @summary Generate event
     * @param {AppHostApiAppHostGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppHostApiInterface
     * @returns {Promise<AppHostGetEventResponse>} A promise that resolves to a `AppHostGetEventResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-event)
     * 
     */
    appHostGetEvent(requestParameters: AppHostApiAppHostGetEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppHostGetEventResponse>;

    /**
     * Returns the current notification state for a specific user across all mini app domains in this app host. Shows which domains have notifications enabled.
     * @summary Enabled notifications
     * @param {AppHostApiAppHostGetUserStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppHostApiInterface
     * @returns {Promise<AppHostUserStateResponse>} A promise that resolves to a `AppHostUserStateResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-user-state)
     * 
     */
    appHostGetUserState(requestParameters: AppHostApiAppHostGetUserStateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppHostUserStateResponse>;

    /**
     * Post an app_host event to the domain\'s webhook. Events such as enabling or disabling notifications for a user. Provide either a signed message or the signer UUID of an authorized neynar-hosted signers.
     * @summary Send event
     * @param {AppHostApiAppHostPostEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppHostApiInterface
     * @returns {Promise<AppHostPostEventResponse>} A promise that resolves to a `AppHostPostEventResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-post-event)
     * 
     */
    appHostPostEvent(requestParameters: AppHostApiAppHostPostEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppHostPostEventResponse>;

}

/**
 * Request parameters for appHostGetEvent operation in AppHostApi.
 * @export
 * @interface AppHostApiAppHostGetEventRequest
 */
export interface AppHostApiAppHostGetEventRequest {
    /**
     * The domain of the mini app
     * 
     * 
     * 
     * @type {string}
     * @memberof AppHostApiAppHostGetEvent
     */
    readonly appDomain: string

    /**
     * The FID of the user who initiated the event
     * 
     * 
     * 
     * @type {number}
     * @memberof AppHostApiAppHostGetEvent
     */
    readonly fid: number

    /**
     * The type of event
     * 
     * 
     * 
     * @type {'frame_added' | 'frame_removed' | 'notifications_enabled' | 'notifications_disabled'}
     * @memberof AppHostApiAppHostGetEvent
     */
    readonly event: AppHostGetEventEventEnum
}

/**
 * Request parameters for appHostGetUserState operation in AppHostApi.
 * @export
 * @interface AppHostApiAppHostGetUserStateRequest
 */
export interface AppHostApiAppHostGetUserStateRequest {
    /**
     * The FID of the user
     * 
     * 
     * 
     * @type {number}
     * @memberof AppHostApiAppHostGetUserState
     */
    readonly fid: number
}

/**
 * Request parameters for appHostPostEvent operation in AppHostApi.
 * @export
 * @interface AppHostApiAppHostPostEventRequest
 */
export interface AppHostApiAppHostPostEventRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {AppHostPostEventReqBody}
     * @memberof AppHostApiAppHostPostEvent
     */
    readonly appHostPostEventReqBody: AppHostPostEventReqBody
}

/**
 * AppHostApi - object-oriented interface
 * @export
 * @class AppHostApi
 * @extends {BaseAPI}
 */
export class AppHostApi extends BaseAPI implements AppHostApiInterface {
    /**
     * Returns event object for app host events. Used if the app host intends to sign the event message instead of using Neynar-hosted signers.
     * @summary Generate event
     * @param {AppHostApiAppHostGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppHostApi
     * @returns {Promise<AppHostGetEventResponse>} A promise that resolves to a `AppHostGetEventResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-event)
     * 
     */
    public appHostGetEvent(requestParameters: AppHostApiAppHostGetEventRequest, options?: RawAxiosRequestConfig) {
        return AppHostApiFp(this.configuration).appHostGetEvent(requestParameters.appDomain, requestParameters.fid, requestParameters.event, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current notification state for a specific user across all mini app domains in this app host. Shows which domains have notifications enabled.
     * @summary Enabled notifications
     * @param {AppHostApiAppHostGetUserStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppHostApi
     * @returns {Promise<AppHostUserStateResponse>} A promise that resolves to a `AppHostUserStateResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-get-user-state)
     * 
     */
    public appHostGetUserState(requestParameters: AppHostApiAppHostGetUserStateRequest, options?: RawAxiosRequestConfig) {
        return AppHostApiFp(this.configuration).appHostGetUserState(requestParameters.fid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post an app_host event to the domain\'s webhook. Events such as enabling or disabling notifications for a user. Provide either a signed message or the signer UUID of an authorized neynar-hosted signers.
     * @summary Send event
     * @param {AppHostApiAppHostPostEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppHostApi
     * @returns {Promise<AppHostPostEventResponse>} A promise that resolves to a `AppHostPostEventResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/app-host-post-event)
     * 
     */
    public appHostPostEvent(requestParameters: AppHostApiAppHostPostEventRequest, options?: RawAxiosRequestConfig) {
        return AppHostApiFp(this.configuration).appHostPostEvent(requestParameters.appHostPostEventReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AppHostGetEventEventEnum = {
    FrameAdded: 'frame_added',
    FrameRemoved: 'frame_removed',
    NotificationsEnabled: 'notifications_enabled',
    NotificationsDisabled: 'notifications_disabled'
} as const;
export type AppHostGetEventEventEnum = typeof AppHostGetEventEventEnum[keyof typeof AppHostGetEventEventEnum];
