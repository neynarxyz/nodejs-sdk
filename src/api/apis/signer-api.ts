/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.25.1
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuthorizationUrlResponse } from '../models';
// @ts-ignore
import type { AuthorizationUrlResponseType } from '../models';
// @ts-ignore
import type { DeveloperManagedSigner } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { RegisterDeveloperManagedSignedKeyReqBody } from '../models';
// @ts-ignore
import type { RegisterSignerKeyReqBody } from '../models';
// @ts-ignore
import type { Signer } from '../models';
// @ts-ignore
import type { SignerListResponse } from '../models';
/**
 * SignerApi - axios parameter creator
 * @export
 */
export const SignerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer. 
         * @summary Create signer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
         * 
         */
        createSigner: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farcaster/signer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
         * @summary Fetch authorization url
         * @param {string} clientId  
         * @param {AuthorizationUrlResponseType} responseType  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
         * 
         */
        fetchAuthorizationUrl: async (clientId: string, responseType: AuthorizationUrlResponseType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('fetchAuthorizationUrl', 'clientId', clientId)
            // verify required parameter 'responseType' is not null or undefined
            assertParamExists('fetchAuthorizationUrl', 'responseType', responseType)
            const localVarPath = `/farcaster/login/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a list of signers for a custody address
         * @summary List signers
         * @param {string} message A Sign-In with Ethereum (SIWE) message that the user\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.  example:  example.com wants you to sign in with your Ethereum account:\\\\n0x23A...F232\\\\n\\\\nSign in to continue.\\\\n\\\\nURI: example.com\\\\nVersion: 1\\\\nChain ID: 1\\\\nNonce: xyz123\\\\nIssued At: 2021-09-01T14:52:07Z  Note: This is just an example message (So, message is invalid, since we don\&#39;t want any signers related to NEYNAR_API_DOCS to be exposed).   [Checkout fetch-signers API documentation for more details.](https://docs.neynar.com/docs/fetch-signers-1)  
         * @param {string} signature The digital signature produced by signing the provided SIWE message with the user\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
         * 
         */
        fetchSigners: async (message: string, signature: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'message' is not null or undefined
            assertParamExists('fetchSigners', 'message', message)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('fetchSigners', 'signature', signature)
            const localVarPath = `/farcaster/signer/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the status of a developer managed signer by public key
         * @summary Status by public key
         * @param {string} publicKey  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
         * 
         */
        lookupDeveloperManagedSigner: async (publicKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publicKey' is not null or undefined
            assertParamExists('lookupDeveloperManagedSigner', 'publicKey', publicKey)
            const localVarPath = `/farcaster/signer/developer_managed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (publicKey !== undefined) {
                localVarQueryParameter['public_key'] = publicKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
         * @summary Status
         * @param {string} signerUuid  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
         * 
         */
        lookupSigner: async (signerUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signerUuid' is not null or undefined
            assertParamExists('lookupSigner', 'signerUuid', signerUuid)
            const localVarPath = `/farcaster/signer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (signerUuid !== undefined) {
                localVarQueryParameter['signer_uuid'] = signerUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
         * @summary Publish message
         * @param {object} body  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<object>} A promise that resolves to a `object` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
         * 
         */
        publishMessageToFarcaster: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('publishMessageToFarcaster', 'body', body)
            const localVarPath = `/farcaster/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
         * @summary Register Signed Key
         * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
         * 
         */
        registerSignedKey: async (registerSignerKeyReqBody: RegisterSignerKeyReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerSignerKeyReqBody' is not null or undefined
            assertParamExists('registerSignedKey', 'registerSignerKeyReqBody', registerSignerKeyReqBody)
            const localVarPath = `/farcaster/signer/signed_key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerSignerKeyReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers an signed key and returns the developer managed signer status with an approval url.
         * @summary Register Signed Key
         * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
         * 
         */
        registerSignedKeyForDeveloperManagedSigner: async (registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDeveloperManagedSignedKeyReqBody' is not null or undefined
            assertParamExists('registerSignedKeyForDeveloperManagedSigner', 'registerDeveloperManagedSignedKeyReqBody', registerDeveloperManagedSignedKeyReqBody)
            const localVarPath = `/farcaster/signer/developer_managed/signed_key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDeveloperManagedSignedKeyReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignerApi - functional programming interface
 * @export
 */
export const SignerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignerApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer. 
         * @summary Create signer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
         * 
         */
        async createSigner(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSigner(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.createSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
         * @summary Fetch authorization url
         * @param {string} clientId  
         * @param {AuthorizationUrlResponseType} responseType  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
         * 
         */
        async fetchAuthorizationUrl(clientId: string, responseType: AuthorizationUrlResponseType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationUrlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAuthorizationUrl(clientId, responseType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.fetchAuthorizationUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches a list of signers for a custody address
         * @summary List signers
         * @param {string} message A Sign-In with Ethereum (SIWE) message that the user\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.  example:  example.com wants you to sign in with your Ethereum account:\\\\n0x23A...F232\\\\n\\\\nSign in to continue.\\\\n\\\\nURI: example.com\\\\nVersion: 1\\\\nChain ID: 1\\\\nNonce: xyz123\\\\nIssued At: 2021-09-01T14:52:07Z  Note: This is just an example message (So, message is invalid, since we don\&#39;t want any signers related to NEYNAR_API_DOCS to be exposed).   [Checkout fetch-signers API documentation for more details.](https://docs.neynar.com/docs/fetch-signers-1)  
         * @param {string} signature The digital signature produced by signing the provided SIWE message with the user\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
         * 
         */
        async fetchSigners(message: string, signature: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSigners(message, signature, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.fetchSigners']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches the status of a developer managed signer by public key
         * @summary Status by public key
         * @param {string} publicKey  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
         * 
         */
        async lookupDeveloperManagedSigner(publicKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupDeveloperManagedSigner(publicKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.lookupDeveloperManagedSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
         * @summary Status
         * @param {string} signerUuid  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
         * 
         */
        async lookupSigner(signerUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupSigner(signerUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.lookupSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
         * @summary Publish message
         * @param {object} body  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<object>} A promise that resolves to a `object` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
         * 
         */
        async publishMessageToFarcaster(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishMessageToFarcaster(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.publishMessageToFarcaster']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
         * @summary Register Signed Key
         * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
         * 
         */
        async registerSignedKey(registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSignedKey(registerSignerKeyReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.registerSignedKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registers an signed key and returns the developer managed signer status with an approval url.
         * @summary Register Signed Key
         * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
         * 
         */
        async registerSignedKeyForDeveloperManagedSigner(registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSignedKeyForDeveloperManagedSigner(registerDeveloperManagedSignedKeyReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SignerApi.registerSignedKeyForDeveloperManagedSigner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SignerApi - factory interface
 * @export
 */
export const SignerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignerApiFp(configuration)
    return {
        /**
         * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer. 
         * @summary Create signer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
         * 
         */
        createSigner(options?: RawAxiosRequestConfig): AxiosPromise<Signer> {
            return localVarFp.createSigner(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
         * @summary Fetch authorization url
         * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
         * 
         */
        fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationUrlResponse> {
            return localVarFp.fetchAuthorizationUrl(requestParameters.clientId, requestParameters.responseType, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a list of signers for a custody address
         * @summary List signers
         * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
         * 
         */
        fetchSigners(requestParameters: SignerApiFetchSignersRequest, options?: RawAxiosRequestConfig): AxiosPromise<SignerListResponse> {
            return localVarFp.fetchSigners(requestParameters.message, requestParameters.signature, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the status of a developer managed signer by public key
         * @summary Status by public key
         * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
         * 
         */
        lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner> {
            return localVarFp.lookupDeveloperManagedSigner(requestParameters.publicKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
         * @summary Status
         * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
         * 
         */
        lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer> {
            return localVarFp.lookupSigner(requestParameters.signerUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
         * @summary Publish message
         * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<object>} A promise that resolves to a `object` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
         * 
         */
        publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.publishMessageToFarcaster(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
         * @summary Register Signed Key
         * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
         * 
         */
        registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer> {
            return localVarFp.registerSignedKey(requestParameters.registerSignerKeyReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers an signed key and returns the developer managed signer status with an approval url.
         * @summary Register Signed Key
         * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
         * 
         */
        registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner> {
            return localVarFp.registerSignedKeyForDeveloperManagedSigner(requestParameters.registerDeveloperManagedSignedKeyReqBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignerApi - interface
 * @export
 * @interface SignerApi
 */
export interface SignerApiInterface {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer. 
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     * 
     */
    createSigner(options?: RawAxiosRequestConfig): AxiosPromise<Signer>;

    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     * 
     */
    fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationUrlResponse>;

    /**
     * Fetches a list of signers for a custody address
     * @summary List signers
     * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
     * 
     */
    fetchSigners(requestParameters: SignerApiFetchSignersRequest, options?: RawAxiosRequestConfig): AxiosPromise<SignerListResponse>;

    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     * 
     */
    lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;

    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     * 
     */
    lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;

    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<object>} A promise that resolves to a `object` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     * 
     */
    publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     * 
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;

    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     * 
     */
    registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;

}

/**
 * Request parameters for fetchAuthorizationUrl operation in SignerApi.
 * @export
 * @interface SignerApiFetchAuthorizationUrlRequest
 */
export interface SignerApiFetchAuthorizationUrlRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {string}
     * @memberof SignerApiFetchAuthorizationUrl
     */
    readonly clientId: string

    /**
     * 
     * 
     * 
     * 
     * @type {AuthorizationUrlResponseType}
     * @memberof SignerApiFetchAuthorizationUrl
     */
    readonly responseType: AuthorizationUrlResponseType
}

/**
 * Request parameters for fetchSigners operation in SignerApi.
 * @export
 * @interface SignerApiFetchSignersRequest
 */
export interface SignerApiFetchSignersRequest {
    /**
     * A Sign-In with Ethereum (SIWE) message that the user\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.  example:  example.com wants you to sign in with your Ethereum account:\\\\n0x23A...F232\\\\n\\\\nSign in to continue.\\\\n\\\\nURI: example.com\\\\nVersion: 1\\\\nChain ID: 1\\\\nNonce: xyz123\\\\nIssued At: 2021-09-01T14:52:07Z  Note: This is just an example message (So, message is invalid, since we don\&#39;t want any signers related to NEYNAR_API_DOCS to be exposed).   [Checkout fetch-signers API documentation for more details.](https://docs.neynar.com/docs/fetch-signers-1) 
     * 
     * 
     * 
     * @type {string}
     * @memberof SignerApiFetchSigners
     */
    readonly message: string

    /**
     * The digital signature produced by signing the provided SIWE message with the user\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer. 
     * 
     * 
     * 
     * @type {string}
     * @memberof SignerApiFetchSigners
     */
    readonly signature: string
}

/**
 * Request parameters for lookupDeveloperManagedSigner operation in SignerApi.
 * @export
 * @interface SignerApiLookupDeveloperManagedSignerRequest
 */
export interface SignerApiLookupDeveloperManagedSignerRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {string}
     * @memberof SignerApiLookupDeveloperManagedSigner
     */
    readonly publicKey: string
}

/**
 * Request parameters for lookupSigner operation in SignerApi.
 * @export
 * @interface SignerApiLookupSignerRequest
 */
export interface SignerApiLookupSignerRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {string}
     * @memberof SignerApiLookupSigner
     */
    readonly signerUuid: string
}

/**
 * Request parameters for publishMessageToFarcaster operation in SignerApi.
 * @export
 * @interface SignerApiPublishMessageToFarcasterRequest
 */
export interface SignerApiPublishMessageToFarcasterRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {object}
     * @memberof SignerApiPublishMessageToFarcaster
     */
    readonly body: object
}

/**
 * Request parameters for registerSignedKey operation in SignerApi.
 * @export
 * @interface SignerApiRegisterSignedKeyRequest
 */
export interface SignerApiRegisterSignedKeyRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {RegisterSignerKeyReqBody}
     * @memberof SignerApiRegisterSignedKey
     */
    readonly registerSignerKeyReqBody: RegisterSignerKeyReqBody
}

/**
 * Request parameters for registerSignedKeyForDeveloperManagedSigner operation in SignerApi.
 * @export
 * @interface SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest
 */
export interface SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {RegisterDeveloperManagedSignedKeyReqBody}
     * @memberof SignerApiRegisterSignedKeyForDeveloperManagedSigner
     */
    readonly registerDeveloperManagedSignedKeyReqBody: RegisterDeveloperManagedSignedKeyReqBody
}

/**
 * SignerApi - object-oriented interface
 * @export
 * @class SignerApi
 * @extends {BaseAPI}
 */
export class SignerApi extends BaseAPI implements SignerApiInterface {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer. 
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     * 
     */
    public createSigner(options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).createSigner(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     * 
     */
    public fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).fetchAuthorizationUrl(requestParameters.clientId, requestParameters.responseType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a list of signers for a custody address
     * @summary List signers
     * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)
     * 
     */
    public fetchSigners(requestParameters: SignerApiFetchSignersRequest, options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).fetchSigners(requestParameters.message, requestParameters.signature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     * 
     */
    public lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).lookupDeveloperManagedSigner(requestParameters.publicKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     * 
     */
    public lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).lookupSigner(requestParameters.signerUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<object>} A promise that resolves to a `object` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     * 
     */
    public publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).publishMessageToFarcaster(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     * 
     */
    public registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).registerSignedKey(requestParameters.registerSignerKeyReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     * 
     */
    public registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig) {
        return SignerApiFp(this.configuration).registerSignedKeyForDeveloperManagedSigner(requestParameters.registerDeveloperManagedSignedKeyReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}

