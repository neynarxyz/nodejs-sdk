/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.12.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteFrameReqBody } from '../models';
// @ts-ignore
import type { DeleteFrameResponse } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { FetchFeedForYou400Response } from '../models';
// @ts-ignore
import type { FetchFrameMetaTagsFromUrl200Response } from '../models';
// @ts-ignore
import type { Frame } from '../models';
// @ts-ignore
import type { FrameActionReqBody } from '../models';
// @ts-ignore
import type { FrameCatalogResponse } from '../models';
// @ts-ignore
import type { FrameDeveloperManagedActionReqBody } from '../models';
// @ts-ignore
import type { FrameNotificationTokens } from '../models';
// @ts-ignore
import type { FrameType } from '../models';
// @ts-ignore
import type { FrameValidateAnalyticsResponse } from '../models';
// @ts-ignore
import type { FrameValidateListResponse } from '../models';
// @ts-ignore
import type { NeynarFrame } from '../models';
// @ts-ignore
import type { NeynarFrameCreationReqBody } from '../models';
// @ts-ignore
import type { NeynarFrameUpdateReqBody } from '../models';
// @ts-ignore
import type { SendFrameNotificationsReqBody } from '../models';
// @ts-ignore
import type { SendFrameNotificationsResponse } from '../models';
// @ts-ignore
import type { ValidateFrameActionReqBody } from '../models';
// @ts-ignore
import type { ValidateFrameActionResponse } from '../models';
// @ts-ignore
import type { ValidateFrameAggregateWindow } from '../models';
// @ts-ignore
import type { ValidateFrameAnalyticsType } from '../models';
/**
 * FrameApi - axios parameter creator
 * @export
 */
export const FrameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {DeleteFrameReqBody} deleteFrameReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
         * 
         */
        deleteNeynarFrame: async (deleteFrameReqBody: DeleteFrameReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteFrameReqBody' is not null or undefined
            assertParamExists('deleteNeynarFrame', 'deleteFrameReqBody', deleteFrameReqBody)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteFrameReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A curated list of featured frames
         * @summary Frames Catalog
         * @param {number} [limit] Number of results to fetch  (Default: 100, Maximum: 100)
         * @param {string} [cursor] Pagination cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
         * 
         */
        fetchFrameCatalog: async (limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farcaster/frame/catalog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {string} url The frame URL to crawl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
         * 
         */
        fetchFrameMetaTagsFromUrl: async (url: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('fetchFrameMetaTagsFromUrl', 'url', url)
            const localVarPath = `/farcaster/frame/crawl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
         * 
         */
        fetchNeynarFrames: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farcaster/frame/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of notifications tokens related for an app 
         * @summary List of frame notification tokens. 
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
         * @param {string} [fids] Comma separated list of FIDs, up to 100 at a time 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
         * 
         */
        fetchNotificationTokens: async (limit?: number, fids?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farcaster/frame/notification_tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (fids !== undefined) {
                localVarQueryParameter['fids'] = fids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {string} frameUrl  
         * @param {ValidateFrameAnalyticsType} analyticsType  
         * @param {string} start  
         * @param {string} stop  
         * @param {ValidateFrameAggregateWindow} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
         * 
         */
        fetchValidateFrameAnalytics: async (frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: ValidateFrameAggregateWindow, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameUrl' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'frameUrl', frameUrl)
            // verify required parameter 'analyticsType' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'analyticsType', analyticsType)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'start', start)
            // verify required parameter 'stop' is not null or undefined
            assertParamExists('fetchValidateFrameAnalytics', 'stop', stop)
            const localVarPath = `/farcaster/frame/validate/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (frameUrl !== undefined) {
                localVarQueryParameter['frame_url'] = frameUrl;
            }

            if (analyticsType !== undefined) {
                localVarQueryParameter['analytics_type'] = analyticsType;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = (start as any instanceof Date) ?
                    (start as any).toISOString() :
                    start;
            }

            if (stop !== undefined) {
                localVarQueryParameter['stop'] = (stop as any instanceof Date) ?
                    (stop as any).toISOString() :
                    stop;
            }

            if (aggregateWindow !== undefined) {
                localVarQueryParameter['aggregate_window'] = aggregateWindow;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
         * 
         */
        fetchValidateFrameList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/farcaster/frame/validate/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameType} type  
         * @param {string} [uuid] UUID of the frame to fetch 
         * @param {string} [url] URL of the Neynar frame to fetch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
         * 
         */
        lookupNeynarFrame: async (type: FrameType, uuid?: string, url?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('lookupNeynarFrame', 'type', type)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameActionReqBody} frameActionReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
         * 
         */
        postFrameAction: async (frameActionReqBody: FrameActionReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameActionReqBody' is not null or undefined
            assertParamExists('postFrameAction', 'frameActionReqBody', frameActionReqBody)
            const localVarPath = `/farcaster/frame/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frameActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Signature packet
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
         * 
         */
        postFrameActionDeveloperManaged: async (frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'frameDeveloperManagedActionReqBody' is not null or undefined
            assertParamExists('postFrameActionDeveloperManaged', 'frameDeveloperManagedActionReqBody', frameDeveloperManagedActionReqBody)
            const localVarPath = `/farcaster/frame/developer_managed/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frameDeveloperManagedActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send notifications to interactors of a frame 
         * @summary Send notifications
         * @param {SendFrameNotificationsReqBody} sendFrameNotificationsReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
         * 
         */
        publishFrameNotifications: async (sendFrameNotificationsReqBody: SendFrameNotificationsReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendFrameNotificationsReqBody' is not null or undefined
            assertParamExists('publishFrameNotifications', 'sendFrameNotificationsReqBody', sendFrameNotificationsReqBody)
            const localVarPath = `/farcaster/frame/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendFrameNotificationsReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
         * 
         */
        publishNeynarFrame: async (neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'neynarFrameCreationReqBody' is not null or undefined
            assertParamExists('publishNeynarFrame', 'neynarFrameCreationReqBody', neynarFrameCreationReqBody)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(neynarFrameCreationReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
         * 
         */
        updateNeynarFrame: async (neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'neynarFrameUpdateReqBody' is not null or undefined
            assertParamExists('updateNeynarFrame', 'neynarFrameUpdateReqBody', neynarFrameUpdateReqBody)
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(neynarFrameUpdateReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validate frame action
         * @param {ValidateFrameActionReqBody} validateFrameActionReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
         * 
         */
        validateFrameAction: async (validateFrameActionReqBody: ValidateFrameActionReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validateFrameActionReqBody' is not null or undefined
            assertParamExists('validateFrameAction', 'validateFrameActionReqBody', validateFrameActionReqBody)
            const localVarPath = `/farcaster/frame/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validateFrameActionReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FrameApi - functional programming interface
 * @export
 */
export const FrameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FrameApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {DeleteFrameReqBody} deleteFrameReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
         * 
         */
        async deleteNeynarFrame(deleteFrameReqBody: DeleteFrameReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFrameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNeynarFrame(deleteFrameReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.deleteNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A curated list of featured frames
         * @summary Frames Catalog
         * @param {number} [limit] Number of results to fetch  (Default: 100, Maximum: 100)
         * @param {string} [cursor] Pagination cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
         * 
         */
        async fetchFrameCatalog(limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameCatalogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFrameCatalog(limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchFrameCatalog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {string} url The frame URL to crawl 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
         * 
         */
        async fetchFrameMetaTagsFromUrl(url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchFrameMetaTagsFromUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFrameMetaTagsFromUrl(url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchFrameMetaTagsFromUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
         * 
         */
        async fetchNeynarFrames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NeynarFrame>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNeynarFrames(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchNeynarFrames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of notifications tokens related for an app 
         * @summary List of frame notification tokens. 
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
         * @param {string} [fids] Comma separated list of FIDs, up to 100 at a time 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
         * 
         */
        async fetchNotificationTokens(limit?: number, fids?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameNotificationTokens>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNotificationTokens(limit, fids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchNotificationTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {string} frameUrl  
         * @param {ValidateFrameAnalyticsType} analyticsType  
         * @param {string} start  
         * @param {string} stop  
         * @param {ValidateFrameAggregateWindow} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
         * 
         */
        async fetchValidateFrameAnalytics(frameUrl: string, analyticsType: ValidateFrameAnalyticsType, start: string, stop: string, aggregateWindow?: ValidateFrameAggregateWindow, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateAnalyticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameAnalytics(frameUrl, analyticsType, start, stop, aggregateWindow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchValidateFrameAnalytics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
         * 
         */
        async fetchValidateFrameList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameValidateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.fetchValidateFrameList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameType} type  
         * @param {string} [uuid] UUID of the frame to fetch 
         * @param {string} [url] URL of the Neynar frame to fetch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
         * 
         */
        async lookupNeynarFrame(type: FrameType, uuid?: string, url?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupNeynarFrame(type, uuid, url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.lookupNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameActionReqBody} frameActionReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
         * 
         */
        async postFrameAction(frameActionReqBody: FrameActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameAction(frameActionReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.postFrameAction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Signature packet
         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
         * 
         */
        async postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Frame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.postFrameActionDeveloperManaged']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send notifications to interactors of a frame 
         * @summary Send notifications
         * @param {SendFrameNotificationsReqBody} sendFrameNotificationsReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
         * 
         */
        async publishFrameNotifications(sendFrameNotificationsReqBody: SendFrameNotificationsReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendFrameNotificationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishFrameNotifications(sendFrameNotificationsReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.publishFrameNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
         * 
         */
        async publishNeynarFrame(neynarFrameCreationReqBody: NeynarFrameCreationReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishNeynarFrame(neynarFrameCreationReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.publishNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
         * 
         */
        async updateNeynarFrame(neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeynarFrame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNeynarFrame(neynarFrameUpdateReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.updateNeynarFrame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validate frame action
         * @param {ValidateFrameActionReqBody} validateFrameActionReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
         * 
         */
        async validateFrameAction(validateFrameActionReqBody: ValidateFrameActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateFrameActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameAction(validateFrameActionReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FrameApi.validateFrameAction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FrameApi - factory interface
 * @export
 */
export const FrameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FrameApiFp(configuration)
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
         * 
         */
        deleteNeynarFrame(requestParameters: FrameApiDeleteNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteFrameResponse> {
            return localVarFp.deleteNeynarFrame(requestParameters.deleteFrameReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * A curated list of featured frames
         * @summary Frames Catalog
         * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
         * 
         */
        fetchFrameCatalog(requestParameters: FrameApiFetchFrameCatalogRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FrameCatalogResponse> {
            return localVarFp.fetchFrameCatalog(requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
         * 
         */
        fetchFrameMetaTagsFromUrl(requestParameters: FrameApiFetchFrameMetaTagsFromUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchFrameMetaTagsFromUrl200Response> {
            return localVarFp.fetchFrameMetaTagsFromUrl(requestParameters.url, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
         * 
         */
        fetchNeynarFrames(options?: RawAxiosRequestConfig): AxiosPromise<Array<NeynarFrame>> {
            return localVarFp.fetchNeynarFrames(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of notifications tokens related for an app 
         * @summary List of frame notification tokens. 
         * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
         * 
         */
        fetchNotificationTokens(requestParameters: FrameApiFetchNotificationTokensRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FrameNotificationTokens> {
            return localVarFp.fetchNotificationTokens(requestParameters.limit, requestParameters.fids, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
         * 
         */
        fetchValidateFrameAnalytics(requestParameters: FrameApiFetchValidateFrameAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateAnalyticsResponse> {
            return localVarFp.fetchValidateFrameAnalytics(requestParameters.frameUrl, requestParameters.analyticsType, requestParameters.start, requestParameters.stop, requestParameters.aggregateWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
         * 
         */
        fetchValidateFrameList(options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateListResponse> {
            return localVarFp.fetchValidateFrameList(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
         * 
         */
        lookupNeynarFrame(requestParameters: FrameApiLookupNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame> {
            return localVarFp.lookupNeynarFrame(requestParameters.type, requestParameters.uuid, requestParameters.url, options).then((request) => request(axios, basePath));
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
         * 
         */
        postFrameAction(requestParameters: FrameApiPostFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame> {
            return localVarFp.postFrameAction(requestParameters.frameActionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
         * @summary Signature packet
         * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
         * 
         */
        postFrameActionDeveloperManaged(requestParameters: FrameApiPostFrameActionDeveloperManagedRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame> {
            return localVarFp.postFrameActionDeveloperManaged(requestParameters.frameDeveloperManagedActionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Send notifications to interactors of a frame 
         * @summary Send notifications
         * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
         * 
         */
        publishFrameNotifications(requestParameters: FrameApiPublishFrameNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendFrameNotificationsResponse> {
            return localVarFp.publishFrameNotifications(requestParameters.sendFrameNotificationsReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
         * 
         */
        publishNeynarFrame(requestParameters: FrameApiPublishNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame> {
            return localVarFp.publishNeynarFrame(requestParameters.neynarFrameCreationReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
         * 
         */
        updateNeynarFrame(requestParameters: FrameApiUpdateNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame> {
            return localVarFp.updateNeynarFrame(requestParameters.neynarFrameUpdateReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
         * @summary Validate frame action
         * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
         * 
         */
        validateFrameAction(requestParameters: FrameApiValidateFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidateFrameActionResponse> {
            return localVarFp.validateFrameAction(requestParameters.validateFrameActionReqBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FrameApi - interface
 * @export
 * @interface FrameApi
 */
export interface FrameApiInterface {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete frame
     * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     * 
     */
    deleteNeynarFrame(requestParameters: FrameApiDeleteNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteFrameResponse>;

    /**
     * A curated list of featured frames
     * @summary Frames Catalog
     * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
     * 
     */
    fetchFrameCatalog(requestParameters?: FrameApiFetchFrameCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameCatalogResponse>;

    /**
     * Fetches the frame meta tags from the URL
     * @summary Meta tags from URL
     * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     * 
     */
    fetchFrameMetaTagsFromUrl(requestParameters: FrameApiFetchFrameMetaTagsFromUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<FetchFrameMetaTagsFromUrl200Response>;

    /**
     * Fetch a list of frames made by the developer (identified by API key)
     * @summary List of frames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     * 
     */
    fetchNeynarFrames(options?: RawAxiosRequestConfig): AxiosPromise<Array<NeynarFrame>>;

    /**
     * Returns a list of notifications tokens related for an app 
     * @summary List of frame notification tokens. 
     * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
     * 
     */
    fetchNotificationTokens(requestParameters?: FrameApiFetchNotificationTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameNotificationTokens>;

    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the frame
     * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     * 
     */
    fetchValidateFrameAnalytics(requestParameters: FrameApiFetchValidateFrameAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateAnalyticsResponse>;

    /**
     * Fetch a list of all the frames validated by a user
     * @summary All frames validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     * 
     */
    fetchValidateFrameList(options?: RawAxiosRequestConfig): AxiosPromise<FrameValidateListResponse>;

    /**
     * Fetch a frame either by UUID or Neynar URL
     * @summary Frame by UUID or URL
     * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     * 
     */
    lookupNeynarFrame(requestParameters: FrameApiLookupNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;

    /**
     * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
     * @summary Post a frame action, cast action or a cast composer action
     * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     * 
     */
    postFrameAction(requestParameters: FrameApiPostFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame>;

    /**
     * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
     * @summary Signature packet
     * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     * 
     */
    postFrameActionDeveloperManaged(requestParameters: FrameApiPostFrameActionDeveloperManagedRequest, options?: RawAxiosRequestConfig): AxiosPromise<Frame>;

    /**
     * Send notifications to interactors of a frame 
     * @summary Send notifications
     * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
     * 
     */
    publishFrameNotifications(requestParameters: FrameApiPublishFrameNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendFrameNotificationsResponse>;

    /**
     * Create a new frame with a list of pages.
     * @summary Create frame
     * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     * 
     */
    publishNeynarFrame(requestParameters: FrameApiPublishNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;

    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update frame
     * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     * 
     */
    updateNeynarFrame(requestParameters: FrameApiUpdateNeynarFrameRequest, options?: RawAxiosRequestConfig): AxiosPromise<NeynarFrame>;

    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
     * @summary Validate frame action
     * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApiInterface
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     * 
     */
    validateFrameAction(requestParameters: FrameApiValidateFrameActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidateFrameActionResponse>;

}

/**
 * Request parameters for deleteNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiDeleteNeynarFrameRequest
 */
export interface FrameApiDeleteNeynarFrameRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {DeleteFrameReqBody}
     * @memberof FrameApiDeleteNeynarFrame
     */
    readonly deleteFrameReqBody: DeleteFrameReqBody
}

/**
 * Request parameters for fetchFrameCatalog operation in FrameApi.
 * @export
 * @interface FrameApiFetchFrameCatalogRequest
 */
export interface FrameApiFetchFrameCatalogRequest {
    /**
     * Number of results to fetch (Default: 100, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof FrameApiFetchFrameCatalog
     */
    readonly limit?: number

    /**
     * Pagination cursor
     * 
     * 
     * 
     * @type {string}
     * @memberof FrameApiFetchFrameCatalog
     */
    readonly cursor?: string
}

/**
 * Request parameters for fetchFrameMetaTagsFromUrl operation in FrameApi.
 * @export
 * @interface FrameApiFetchFrameMetaTagsFromUrlRequest
 */
export interface FrameApiFetchFrameMetaTagsFromUrlRequest {
    /**
     * The frame URL to crawl
     * 
     * 
     * 
     * @type {string}
     * @memberof FrameApiFetchFrameMetaTagsFromUrl
     */
    readonly url: string
}

/**
 * Request parameters for fetchNotificationTokens operation in FrameApi.
 * @export
 * @interface FrameApiFetchNotificationTokensRequest
 */
export interface FrameApiFetchNotificationTokensRequest {
    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof FrameApiFetchNotificationTokens
     */
    readonly limit?: number

    /**
     * Comma separated list of FIDs, up to 100 at a time
     * @acceptAs integer
     * @commaSeparated
     * 
     * @type {string}
     * @memberof FrameApiFetchNotificationTokens
     */
    readonly fids?: string
}

/**
 * Request parameters for fetchValidateFrameAnalytics operation in FrameApi.
 * @export
 * @interface FrameApiFetchValidateFrameAnalyticsRequest
 */
export interface FrameApiFetchValidateFrameAnalyticsRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {string}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly frameUrl: string

    /**
     * 
     * 
     * 
     * 
     * @type {ValidateFrameAnalyticsType}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly analyticsType: ValidateFrameAnalyticsType

    /**
     * 
     * 
     * 
     * 
     * @type {string}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly start: string

    /**
     * 
     * 
     * 
     * 
     * @type {string}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly stop: string

    /**
     * Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
     * 
     * 
     * 
     * @type {ValidateFrameAggregateWindow}
     * @memberof FrameApiFetchValidateFrameAnalytics
     */
    readonly aggregateWindow?: ValidateFrameAggregateWindow
}

/**
 * Request parameters for lookupNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiLookupNeynarFrameRequest
 */
export interface FrameApiLookupNeynarFrameRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {FrameType}
     * @memberof FrameApiLookupNeynarFrame
     */
    readonly type: FrameType

    /**
     * UUID of the frame to fetch
     * 
     * 
     * 
     * @type {string}
     * @memberof FrameApiLookupNeynarFrame
     */
    readonly uuid?: string

    /**
     * URL of the Neynar frame to fetch
     * 
     * 
     * 
     * @type {string}
     * @memberof FrameApiLookupNeynarFrame
     */
    readonly url?: string
}

/**
 * Request parameters for postFrameAction operation in FrameApi.
 * @export
 * @interface FrameApiPostFrameActionRequest
 */
export interface FrameApiPostFrameActionRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {FrameActionReqBody}
     * @memberof FrameApiPostFrameAction
     */
    readonly frameActionReqBody: FrameActionReqBody
}

/**
 * Request parameters for postFrameActionDeveloperManaged operation in FrameApi.
 * @export
 * @interface FrameApiPostFrameActionDeveloperManagedRequest
 */
export interface FrameApiPostFrameActionDeveloperManagedRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {FrameDeveloperManagedActionReqBody}
     * @memberof FrameApiPostFrameActionDeveloperManaged
     */
    readonly frameDeveloperManagedActionReqBody: FrameDeveloperManagedActionReqBody
}

/**
 * Request parameters for publishFrameNotifications operation in FrameApi.
 * @export
 * @interface FrameApiPublishFrameNotificationsRequest
 */
export interface FrameApiPublishFrameNotificationsRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {SendFrameNotificationsReqBody}
     * @memberof FrameApiPublishFrameNotifications
     */
    readonly sendFrameNotificationsReqBody: SendFrameNotificationsReqBody
}

/**
 * Request parameters for publishNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiPublishNeynarFrameRequest
 */
export interface FrameApiPublishNeynarFrameRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {NeynarFrameCreationReqBody}
     * @memberof FrameApiPublishNeynarFrame
     */
    readonly neynarFrameCreationReqBody: NeynarFrameCreationReqBody
}

/**
 * Request parameters for updateNeynarFrame operation in FrameApi.
 * @export
 * @interface FrameApiUpdateNeynarFrameRequest
 */
export interface FrameApiUpdateNeynarFrameRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {NeynarFrameUpdateReqBody}
     * @memberof FrameApiUpdateNeynarFrame
     */
    readonly neynarFrameUpdateReqBody: NeynarFrameUpdateReqBody
}

/**
 * Request parameters for validateFrameAction operation in FrameApi.
 * @export
 * @interface FrameApiValidateFrameActionRequest
 */
export interface FrameApiValidateFrameActionRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {ValidateFrameActionReqBody}
     * @memberof FrameApiValidateFrameAction
     */
    readonly validateFrameActionReqBody: ValidateFrameActionReqBody
}

/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
export class FrameApi extends BaseAPI implements FrameApiInterface {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete frame
     * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     * 
     */
    public deleteNeynarFrame(requestParameters: FrameApiDeleteNeynarFrameRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).deleteNeynarFrame(requestParameters.deleteFrameReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A curated list of featured frames
     * @summary Frames Catalog
     * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object
     * 
     */
    public fetchFrameCatalog(requestParameters: FrameApiFetchFrameCatalogRequest = {}, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchFrameCatalog(requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the frame meta tags from the URL
     * @summary Meta tags from URL
     * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     * 
     */
    public fetchFrameMetaTagsFromUrl(requestParameters: FrameApiFetchFrameMetaTagsFromUrlRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchFrameMetaTagsFromUrl(requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of frames made by the developer (identified by API key)
     * @summary List of frames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     * 
     */
    public fetchNeynarFrames(options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchNeynarFrames(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of notifications tokens related for an app 
     * @summary List of frame notification tokens. 
     * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)
     * 
     */
    public fetchNotificationTokens(requestParameters: FrameApiFetchNotificationTokensRequest = {}, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchNotificationTokens(requestParameters.limit, requestParameters.fids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the frame
     * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     * 
     */
    public fetchValidateFrameAnalytics(requestParameters: FrameApiFetchValidateFrameAnalyticsRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchValidateFrameAnalytics(requestParameters.frameUrl, requestParameters.analyticsType, requestParameters.start, requestParameters.stop, requestParameters.aggregateWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of all the frames validated by a user
     * @summary All frames validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     * 
     */
    public fetchValidateFrameList(options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).fetchValidateFrameList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a frame either by UUID or Neynar URL
     * @summary Frame by UUID or URL
     * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     * 
     */
    public lookupNeynarFrame(requestParameters: FrameApiLookupNeynarFrameRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).lookupNeynarFrame(requestParameters.type, requestParameters.uuid, requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames. 
     * @summary Post a frame action, cast action or a cast composer action
     * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     * 
     */
    public postFrameAction(requestParameters: FrameApiPostFrameActionRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).postFrameAction(requestParameters.frameActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds. 
     * @summary Signature packet
     * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     * 
     */
    public postFrameActionDeveloperManaged(requestParameters: FrameApiPostFrameActionDeveloperManagedRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).postFrameActionDeveloperManaged(requestParameters.frameDeveloperManagedActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send notifications to interactors of a frame 
     * @summary Send notifications
     * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)
     * 
     */
    public publishFrameNotifications(requestParameters: FrameApiPublishFrameNotificationsRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).publishFrameNotifications(requestParameters.sendFrameNotificationsReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new frame with a list of pages.
     * @summary Create frame
     * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     * 
     */
    public publishNeynarFrame(requestParameters: FrameApiPublishNeynarFrameRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).publishNeynarFrame(requestParameters.neynarFrameCreationReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update frame
     * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     * 
     */
    public updateNeynarFrame(requestParameters: FrameApiUpdateNeynarFrameRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).updateNeynarFrame(requestParameters.neynarFrameUpdateReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex) 
     * @summary Validate frame action
     * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     * 
     */
    public validateFrameAction(requestParameters: FrameApiValidateFrameActionRequest, options?: RawAxiosRequestConfig) {
        return FrameApiFp(this.configuration).validateFrameAction(requestParameters.validateFrameActionReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}

