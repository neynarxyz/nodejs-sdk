/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BalanceResponse } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { Networks } from '../models';
/**
 * OnchainApi - axios parameter creator
 * @export
 */
export const OnchainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the token balances of a user given their FID
         * @summary Token balance
         * @param {number} fid FID of the user to fetch 
         * @param {Array<Networks>} networks Comma separated list of networks to fetch balances for. Currently, only \&quot;base\&quot; is supported. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
         * 
         */
        fetchUserBalance: async (fid: number, networks: Array<Networks>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('fetchUserBalance', 'fid', fid)
            // verify required parameter 'networks' is not null or undefined
            assertParamExists('fetchUserBalance', 'networks', networks)
            const localVarPath = `/farcaster/user/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (networks) {
                localVarQueryParameter['networks'] = networks.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnchainApi - functional programming interface
 * @export
 */
export const OnchainApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnchainApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches the token balances of a user given their FID
         * @summary Token balance
         * @param {number} fid FID of the user to fetch 
         * @param {Array<Networks>} networks Comma separated list of networks to fetch balances for. Currently, only \&quot;base\&quot; is supported. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
         * 
         */
        async fetchUserBalance(fid: number, networks: Array<Networks>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserBalance(fid, networks, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OnchainApi.fetchUserBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OnchainApi - factory interface
 * @export
 */
export const OnchainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnchainApiFp(configuration)
    return {
        /**
         * Fetches the token balances of a user given their FID
         * @summary Token balance
         * @param {OnchainApiFetchUserBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
         * 
         */
        fetchUserBalance(requestParameters: OnchainApiFetchUserBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<BalanceResponse> {
            return localVarFp.fetchUserBalance(requestParameters.fid, requestParameters.networks, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OnchainApi - interface
 * @export
 * @interface OnchainApi
 */
export interface OnchainApiInterface {
    /**
     * Fetches the token balances of a user given their FID
     * @summary Token balance
     * @param {OnchainApiFetchUserBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnchainApiInterface
     * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
     * 
     */
    fetchUserBalance(requestParameters: OnchainApiFetchUserBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<BalanceResponse>;

}

/**
 * Request parameters for fetchUserBalance operation in OnchainApi.
 * @export
 * @interface OnchainApiFetchUserBalanceRequest
 */
export interface OnchainApiFetchUserBalanceRequest {
    /**
     * FID of the user to fetch
     * 
     * 
     * 
     * @type {number}
     * @memberof OnchainApiFetchUserBalance
     */
    readonly fid: number

    /**
     * Comma separated list of networks to fetch balances for. Currently, only \&quot;base\&quot; is supported.
     * 
     * 
     * 
     * @type {Array<Networks>}
     * @memberof OnchainApiFetchUserBalance
     */
    readonly networks: Array<Networks>
}

/**
 * OnchainApi - object-oriented interface
 * @export
 * @class OnchainApi
 * @extends {BaseAPI}
 */
export class OnchainApi extends BaseAPI implements OnchainApiInterface {
    /**
     * Fetches the token balances of a user given their FID
     * @summary Token balance
     * @param {OnchainApiFetchUserBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnchainApi
     * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
     * 
     */
    public fetchUserBalance(requestParameters: OnchainApiFetchUserBalanceRequest, options?: RawAxiosRequestConfig) {
        return OnchainApiFp(this.configuration).fetchUserBalance(requestParameters.fid, requestParameters.networks, options).then((request) => request(this.axios, this.basePath));
    }
}

