/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CastComposerActionsListResponse } from '../models';
// @ts-ignore
import type { CastEmbedCrawlResponse } from '../models';
// @ts-ignore
import type { CastResponse } from '../models';
// @ts-ignore
import type { CastsResponse } from '../models';
// @ts-ignore
import type { CastsSearchResponse } from '../models';
// @ts-ignore
import type { Conversation } from '../models';
// @ts-ignore
import type { DeleteCastReqBody } from '../models';
// @ts-ignore
import type { ErrorRes } from '../models';
// @ts-ignore
import type { OperationResponse } from '../models';
// @ts-ignore
import type { PostCastReqBody } from '../models';
// @ts-ignore
import type { PostCastResponse } from '../models';
/**
 * CastApi - axios parameter creator
 * @export
 */
export const CastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an existing cast.  (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {DeleteCastReqBody} deleteCastReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
         * 
         */
        deleteCast: async (deleteCastReqBody: DeleteCastReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCastReqBody' is not null or undefined
            assertParamExists('deleteCast', 'deleteCastReqBody', deleteCastReqBody)
            const localVarPath = `/v2/farcaster/cast/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCastReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch multiple casts using their respective hashes.
         * @summary Bulk fetch casts
         * @param {string} casts Hashes of the cast to be retrived (Comma separated, no spaces) 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast. 
         * @param {FetchBulkCastsSortTypeEnum} [sortType] Optional parameter to sort the casts based on different criteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
         * 
         */
        fetchBulkCasts: async (casts: string, xNeynarExperimental?: boolean, viewerFid?: number, sortType?: FetchBulkCastsSortTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'casts' is not null or undefined
            assertParamExists('fetchBulkCasts', 'casts', casts)
            const localVarPath = `/v2/farcaster/casts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (casts !== undefined) {
                localVarQueryParameter['casts'] = casts;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all composer actions on Warpcast. You can filter by top or featured.
         * @summary Fetch composer actions
         * @param {FetchComposerActionsListEnum} list Type of list to fetch. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 25)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
         * 
         */
        fetchComposerActions: async (list: FetchComposerActionsListEnum, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'list' is not null or undefined
            assertParamExists('fetchComposerActions', 'list', list)
            const localVarPath = `/v2/farcaster/cast/composer_actions/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crawls the given URL and returns metadata useful when embedding the URL in a cast.
         * @summary Embedded URL metadata
         * @param {string} url URL to crawl metadata of 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)
         * 
         */
        fetchEmbeddedUrlMetadata: async (url: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('fetchEmbeddedUrlMetadata', 'url', url)
            const localVarPath = `/v2/farcaster/cast/embed/crawl/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information about an individual cast by passing in a Farcaster web URL or cast hash
         * @summary By hash or URL
         * @param {string} identifier Cast identifier (Its either a url or a hash) 
         * @param {LookupCastByHashOrWarpcastUrlTypeEnum} type The query param accepted by the API. Sent along with identifier param. url - Cast identifier is a url hash - Cast identifier is a hash 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
         * 
         */
        lookupCastByHashOrWarpcastUrl: async (identifier: string, type: LookupCastByHashOrWarpcastUrlTypeEnum, xNeynarExperimental?: boolean, viewerFid?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('lookupCastByHashOrWarpcastUrl', 'identifier', identifier)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('lookupCastByHashOrWarpcastUrl', 'type', type)
            const localVarPath = `/v2/farcaster/cast/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
         * @summary Conversation for a cast
         * @param {string} identifier Cast identifier (It\&#39;s either a URL or a hash) 
         * @param {LookupCastConversationTypeEnum} type The query param accepted by the API. Sent along with identifier param. url - Cast identifier is a url hash - Cast identifier is a hash 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2) 
         * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order 
         * @param {number} [viewerFid] Providing this will return a conversation that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {LookupCastConversationSortTypeEnum} [sortType] Sort type for the ordering of descendants. Default is &#x60;chron&#x60; 
         * @param {LookupCastConversationFoldEnum} [fold] Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding. 
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 50)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
         * 
         */
        lookupCastConversation: async (identifier: string, type: LookupCastConversationTypeEnum, xNeynarExperimental?: boolean, replyDepth?: number, includeChronologicalParentCasts?: boolean, viewerFid?: number, sortType?: LookupCastConversationSortTypeEnum, fold?: LookupCastConversationFoldEnum, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('lookupCastConversation', 'identifier', identifier)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('lookupCastConversation', 'type', type)
            const localVarPath = `/v2/farcaster/cast/conversation/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (replyDepth !== undefined) {
                localVarQueryParameter['reply_depth'] = replyDepth;
            }

            if (includeChronologicalParentCasts !== undefined) {
                localVarQueryParameter['include_chronological_parent_casts'] = includeChronologicalParentCasts;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (fold !== undefined) {
                localVarQueryParameter['fold'] = fold;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Post a cast
         * @param {PostCastReqBody} postCastReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
         * 
         */
        publishCast: async (postCastReqBody: PostCastReqBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCastReqBody' is not null or undefined
            assertParamExists('publishCast', 'postCastReqBody', postCastReqBody)
            const localVarPath = `/v2/farcaster/cast/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCastReqBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for casts based on a query string, with optional AND filters
         * @summary Search for casts
         * @param {string} q Query string to search for casts. Supported operators:  | Operator  | Description                                                                                              | | --------- | -------------------------------------------------------------------------------------------------------- | | &#x60;+&#x60;       | Acts as the AND operator. This is the default operator between terms and can usually be omitted.         | | &#x60;\\|&#x60;      | Acts as the OR operator.                                                                                 | | &#x60;*&#x60;       | When used at the end of a term, signifies a prefix query.                                                  | | &#x60;\&quot;&#x60;       | Wraps several terms into a phrase (for example, &#x60;\&quot;star wars\&quot;&#x60;).                                          | | &#x60;(&#x60;, &#x60;)&#x60;  | Wrap a clause for precedence (for example, &#x60;star + (wars \\| trek)&#x60;).                                     | | &#x60;~n&#x60;      | When used after a term (for example, &#x60;satr~3&#x60;), sets &#x60;fuzziness&#x60;. When used after a phrase, sets &#x60;slop&#x60;. | | &#x60;-&#x60;       | Negates the term.                                                                                        | | &#x60;before:&#x60; | Search for casts before a specific date. (e.g. &#x60;before:2025-04-20&#x60;)                                       | | &#x60;after:&#x60;  | Search for casts after a specific date. (e.g. &#x60;after:2025-04-20&#x60;)                                         | 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {SearchCastsModeEnum} [mode] Choices are: - &#x60;literal&#x60; - Searches for the words in the query string (default) - &#x60;semantic&#x60; - Searches for the meaning of the query string - &#x60;hybrid&#x60; - Combines both literal and semantic results 
         * @param {SearchCastsSortTypeEnum} [sortType] Choices are: - &#x60;desc_chron&#x60; - All casts sorted by time (default) - &#x60;algorithmic&#x60; - Casts sorted by engagement and time 
         * @param {number} [authorFid] Fid of the user whose casts you want to search 
         * @param {number} [viewerFid] Providing this will return search results that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {string} [parentUrl] Parent URL of the casts you want to search 
         * @param {string} [channelId] Channel ID of the casts you want to search 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
         * 
         */
        searchCasts: async (q: string, xNeynarExperimental?: boolean, mode?: SearchCastsModeEnum, sortType?: SearchCastsSortTypeEnum, authorFid?: number, viewerFid?: number, parentUrl?: string, channelId?: string, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('searchCasts', 'q', q)
            const localVarPath = `/v2/farcaster/cast/search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (authorFid !== undefined) {
                localVarQueryParameter['author_fid'] = authorFid;
            }

            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }

            if (parentUrl !== undefined) {
                localVarQueryParameter['parent_url'] = parentUrl;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (xNeynarExperimental != null) {
                localVarHeaderParameter['x-neynar-experimental'] = typeof xNeynarExperimental === 'string'
                    ? xNeynarExperimental
                    : JSON.stringify(xNeynarExperimental);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CastApi - functional programming interface
 * @export
 */
export const CastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CastApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an existing cast.  (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {DeleteCastReqBody} deleteCastReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
         * 
         */
        async deleteCast(deleteCastReqBody: DeleteCastReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCast(deleteCastReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.deleteCast']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch multiple casts using their respective hashes.
         * @summary Bulk fetch casts
         * @param {string} casts Hashes of the cast to be retrived (Comma separated, no spaces) 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast. 
         * @param {FetchBulkCastsSortTypeEnum} [sortType] Optional parameter to sort the casts based on different criteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
         * 
         */
        async fetchBulkCasts(casts: string, xNeynarExperimental?: boolean, viewerFid?: number, sortType?: FetchBulkCastsSortTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CastsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBulkCasts(casts, xNeynarExperimental, viewerFid, sortType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.fetchBulkCasts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches all composer actions on Warpcast. You can filter by top or featured.
         * @summary Fetch composer actions
         * @param {FetchComposerActionsListEnum} list Type of list to fetch. 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 25)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
         * 
         */
        async fetchComposerActions(list: FetchComposerActionsListEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CastComposerActionsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchComposerActions(list, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.fetchComposerActions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Crawls the given URL and returns metadata useful when embedding the URL in a cast.
         * @summary Embedded URL metadata
         * @param {string} url URL to crawl metadata of 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)
         * 
         */
        async fetchEmbeddedUrlMetadata(url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CastEmbedCrawlResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchEmbeddedUrlMetadata(url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.fetchEmbeddedUrlMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets information about an individual cast by passing in a Farcaster web URL or cast hash
         * @summary By hash or URL
         * @param {string} identifier Cast identifier (Its either a url or a hash) 
         * @param {LookupCastByHashOrWarpcastUrlTypeEnum} type The query param accepted by the API. Sent along with identifier param. url - Cast identifier is a url hash - Cast identifier is a hash 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
         * 
         */
        async lookupCastByHashOrWarpcastUrl(identifier: string, type: LookupCastByHashOrWarpcastUrlTypeEnum, xNeynarExperimental?: boolean, viewerFid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastByHashOrWarpcastUrl(identifier, type, xNeynarExperimental, viewerFid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.lookupCastByHashOrWarpcastUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
         * @summary Conversation for a cast
         * @param {string} identifier Cast identifier (It\&#39;s either a URL or a hash) 
         * @param {LookupCastConversationTypeEnum} type The query param accepted by the API. Sent along with identifier param. url - Cast identifier is a url hash - Cast identifier is a hash 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2) 
         * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order 
         * @param {number} [viewerFid] Providing this will return a conversation that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {LookupCastConversationSortTypeEnum} [sortType] Sort type for the ordering of descendants. Default is &#x60;chron&#x60; 
         * @param {LookupCastConversationFoldEnum} [fold] Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding. 
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 50)
         * @param {string} [cursor] Pagination cursor. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
         * 
         */
        async lookupCastConversation(identifier: string, type: LookupCastConversationTypeEnum, xNeynarExperimental?: boolean, replyDepth?: number, includeChronologicalParentCasts?: boolean, viewerFid?: number, sortType?: LookupCastConversationSortTypeEnum, fold?: LookupCastConversationFoldEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Conversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastConversation(identifier, type, xNeynarExperimental, replyDepth, includeChronologicalParentCasts, viewerFid, sortType, fold, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.lookupCastConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Post a cast
         * @param {PostCastReqBody} postCastReqBody  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
         * 
         */
        async publishCast(postCastReqBody: PostCastReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostCastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishCast(postCastReqBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.publishCast']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for casts based on a query string, with optional AND filters
         * @summary Search for casts
         * @param {string} q Query string to search for casts. Supported operators:  | Operator  | Description                                                                                              | | --------- | -------------------------------------------------------------------------------------------------------- | | &#x60;+&#x60;       | Acts as the AND operator. This is the default operator between terms and can usually be omitted.         | | &#x60;\\|&#x60;      | Acts as the OR operator.                                                                                 | | &#x60;*&#x60;       | When used at the end of a term, signifies a prefix query.                                                  | | &#x60;\&quot;&#x60;       | Wraps several terms into a phrase (for example, &#x60;\&quot;star wars\&quot;&#x60;).                                          | | &#x60;(&#x60;, &#x60;)&#x60;  | Wrap a clause for precedence (for example, &#x60;star + (wars \\| trek)&#x60;).                                     | | &#x60;~n&#x60;      | When used after a term (for example, &#x60;satr~3&#x60;), sets &#x60;fuzziness&#x60;. When used after a phrase, sets &#x60;slop&#x60;. | | &#x60;-&#x60;       | Negates the term.                                                                                        | | &#x60;before:&#x60; | Search for casts before a specific date. (e.g. &#x60;before:2025-04-20&#x60;)                                       | | &#x60;after:&#x60;  | Search for casts after a specific date. (e.g. &#x60;after:2025-04-20&#x60;)                                         | 
         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details. 
         * @param {SearchCastsModeEnum} [mode] Choices are: - &#x60;literal&#x60; - Searches for the words in the query string (default) - &#x60;semantic&#x60; - Searches for the meaning of the query string - &#x60;hybrid&#x60; - Combines both literal and semantic results 
         * @param {SearchCastsSortTypeEnum} [sortType] Choices are: - &#x60;desc_chron&#x60; - All casts sorted by time (default) - &#x60;algorithmic&#x60; - Casts sorted by engagement and time 
         * @param {number} [authorFid] Fid of the user whose casts you want to search 
         * @param {number} [viewerFid] Providing this will return search results that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;. 
         * @param {string} [parentUrl] Parent URL of the casts you want to search 
         * @param {string} [channelId] Channel ID of the casts you want to search 
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
         * 
         */
        async searchCasts(q: string, xNeynarExperimental?: boolean, mode?: SearchCastsModeEnum, sortType?: SearchCastsSortTypeEnum, authorFid?: number, viewerFid?: number, parentUrl?: string, channelId?: string, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CastsSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCasts(q, xNeynarExperimental, mode, sortType, authorFid, viewerFid, parentUrl, channelId, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CastApi.searchCasts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CastApi - factory interface
 * @export
 */
export const CastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CastApiFp(configuration)
    return {
        /**
         * Delete an existing cast.  (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {CastApiDeleteCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
         * 
         */
        deleteCast(requestParameters: CastApiDeleteCastRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse> {
            return localVarFp.deleteCast(requestParameters.deleteCastReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch multiple casts using their respective hashes.
         * @summary Bulk fetch casts
         * @param {CastApiFetchBulkCastsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
         * 
         */
        fetchBulkCasts(requestParameters: CastApiFetchBulkCastsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastsResponse> {
            return localVarFp.fetchBulkCasts(requestParameters.casts, requestParameters.xNeynarExperimental, requestParameters.viewerFid, requestParameters.sortType, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all composer actions on Warpcast. You can filter by top or featured.
         * @summary Fetch composer actions
         * @param {CastApiFetchComposerActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
         * 
         */
        fetchComposerActions(requestParameters: CastApiFetchComposerActionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastComposerActionsListResponse> {
            return localVarFp.fetchComposerActions(requestParameters.list, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Crawls the given URL and returns metadata useful when embedding the URL in a cast.
         * @summary Embedded URL metadata
         * @param {CastApiFetchEmbeddedUrlMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)
         * 
         */
        fetchEmbeddedUrlMetadata(requestParameters: CastApiFetchEmbeddedUrlMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastEmbedCrawlResponse> {
            return localVarFp.fetchEmbeddedUrlMetadata(requestParameters.url, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information about an individual cast by passing in a Farcaster web URL or cast hash
         * @summary By hash or URL
         * @param {CastApiLookupCastByHashOrWarpcastUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
         * 
         */
        lookupCastByHashOrWarpcastUrl(requestParameters: CastApiLookupCastByHashOrWarpcastUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastResponse> {
            return localVarFp.lookupCastByHashOrWarpcastUrl(requestParameters.identifier, requestParameters.type, requestParameters.xNeynarExperimental, requestParameters.viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
         * @summary Conversation for a cast
         * @param {CastApiLookupCastConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
         * 
         */
        lookupCastConversation(requestParameters: CastApiLookupCastConversationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Conversation> {
            return localVarFp.lookupCastConversation(requestParameters.identifier, requestParameters.type, requestParameters.xNeynarExperimental, requestParameters.replyDepth, requestParameters.includeChronologicalParentCasts, requestParameters.viewerFid, requestParameters.sortType, requestParameters.fold, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Post a cast
         * @param {CastApiPublishCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
         * 
         */
        publishCast(requestParameters: CastApiPublishCastRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostCastResponse> {
            return localVarFp.publishCast(requestParameters.postCastReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for casts based on a query string, with optional AND filters
         * @summary Search for casts
         * @param {CastApiSearchCastsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
         * 
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
         * 
         */
        searchCasts(requestParameters: CastApiSearchCastsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastsSearchResponse> {
            return localVarFp.searchCasts(requestParameters.q, requestParameters.xNeynarExperimental, requestParameters.mode, requestParameters.sortType, requestParameters.authorFid, requestParameters.viewerFid, requestParameters.parentUrl, requestParameters.channelId, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CastApi - interface
 * @export
 * @interface CastApi
 */
export interface CastApiInterface {
    /**
     * Delete an existing cast.  (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {CastApiDeleteCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
     * 
     */
    deleteCast(requestParameters: CastApiDeleteCastRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;

    /**
     * Fetch multiple casts using their respective hashes.
     * @summary Bulk fetch casts
     * @param {CastApiFetchBulkCastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
     * 
     */
    fetchBulkCasts(requestParameters: CastApiFetchBulkCastsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastsResponse>;

    /**
     * Fetches all composer actions on Warpcast. You can filter by top or featured.
     * @summary Fetch composer actions
     * @param {CastApiFetchComposerActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
     * 
     */
    fetchComposerActions(requestParameters: CastApiFetchComposerActionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastComposerActionsListResponse>;

    /**
     * Crawls the given URL and returns metadata useful when embedding the URL in a cast.
     * @summary Embedded URL metadata
     * @param {CastApiFetchEmbeddedUrlMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)
     * 
     */
    fetchEmbeddedUrlMetadata(requestParameters: CastApiFetchEmbeddedUrlMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastEmbedCrawlResponse>;

    /**
     * Gets information about an individual cast by passing in a Farcaster web URL or cast hash
     * @summary By hash or URL
     * @param {CastApiLookupCastByHashOrWarpcastUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
     * 
     */
    lookupCastByHashOrWarpcastUrl(requestParameters: CastApiLookupCastByHashOrWarpcastUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastResponse>;

    /**
     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
     * @summary Conversation for a cast
     * @param {CastApiLookupCastConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
     * 
     */
    lookupCastConversation(requestParameters: CastApiLookupCastConversationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Conversation>;

    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Post a cast
     * @param {CastApiPublishCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
     * 
     */
    publishCast(requestParameters: CastApiPublishCastRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostCastResponse>;

    /**
     * Search for casts based on a query string, with optional AND filters
     * @summary Search for casts
     * @param {CastApiSearchCastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApiInterface
     * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
     * 
     */
    searchCasts(requestParameters: CastApiSearchCastsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CastsSearchResponse>;

}

/**
 * Request parameters for deleteCast operation in CastApi.
 * @export
 * @interface CastApiDeleteCastRequest
 */
export interface CastApiDeleteCastRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {DeleteCastReqBody}
     * @memberof CastApiDeleteCast
     */
    readonly deleteCastReqBody: DeleteCastReqBody
}

/**
 * Request parameters for fetchBulkCasts operation in CastApi.
 * @export
 * @interface CastApiFetchBulkCastsRequest
 */
export interface CastApiFetchBulkCastsRequest {
    /**
     * Hashes of the cast to be retrived (Comma separated, no spaces)
     * 
     * @commaSeparated
     * 
     * @type {string}
     * @memberof CastApiFetchBulkCasts
     */
    readonly casts: string

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof CastApiFetchBulkCasts
     */
    readonly xNeynarExperimental?: boolean

    /**
     * adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiFetchBulkCasts
     */
    readonly viewerFid?: number

    /**
     * Optional parameter to sort the casts based on different criteria
     * 
     * 
     * 
     * @type {'trending' | 'likes' | 'recasts' | 'replies' | 'recent'}
     * @memberof CastApiFetchBulkCasts
     */
    readonly sortType?: FetchBulkCastsSortTypeEnum
}

/**
 * Request parameters for fetchComposerActions operation in CastApi.
 * @export
 * @interface CastApiFetchComposerActionsRequest
 */
export interface CastApiFetchComposerActionsRequest {
    /**
     * Type of list to fetch.
     * 
     * 
     * 
     * @type {'top' | 'featured'}
     * @memberof CastApiFetchComposerActions
     */
    readonly list: FetchComposerActionsListEnum

    /**
     * Number of results to fetch (Default: 25, Maximum: 25)
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiFetchComposerActions
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiFetchComposerActions
     */
    readonly cursor?: string
}

/**
 * Request parameters for fetchEmbeddedUrlMetadata operation in CastApi.
 * @export
 * @interface CastApiFetchEmbeddedUrlMetadataRequest
 */
export interface CastApiFetchEmbeddedUrlMetadataRequest {
    /**
     * URL to crawl metadata of
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiFetchEmbeddedUrlMetadata
     */
    readonly url: string
}

/**
 * Request parameters for lookupCastByHashOrWarpcastUrl operation in CastApi.
 * @export
 * @interface CastApiLookupCastByHashOrWarpcastUrlRequest
 */
export interface CastApiLookupCastByHashOrWarpcastUrlRequest {
    /**
     * Cast identifier (Its either a url or a hash)
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiLookupCastByHashOrWarpcastUrl
     */
    readonly identifier: string

    /**
     * The query param accepted by the API. Sent along with identifier param. url - Cast identifier is a url hash - Cast identifier is a hash
     * 
     * 
     * 
     * @type {'url' | 'hash'}
     * @memberof CastApiLookupCastByHashOrWarpcastUrl
     */
    readonly type: LookupCastByHashOrWarpcastUrlTypeEnum

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof CastApiLookupCastByHashOrWarpcastUrl
     */
    readonly xNeynarExperimental?: boolean

    /**
     * adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiLookupCastByHashOrWarpcastUrl
     */
    readonly viewerFid?: number
}

/**
 * Request parameters for lookupCastConversation operation in CastApi.
 * @export
 * @interface CastApiLookupCastConversationRequest
 */
export interface CastApiLookupCastConversationRequest {
    /**
     * Cast identifier (It\&#39;s either a URL or a hash)
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiLookupCastConversation
     */
    readonly identifier: string

    /**
     * The query param accepted by the API. Sent along with identifier param. url - Cast identifier is a url hash - Cast identifier is a hash
     * 
     * 
     * 
     * @type {'url' | 'hash'}
     * @memberof CastApiLookupCastConversation
     */
    readonly type: LookupCastConversationTypeEnum

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof CastApiLookupCastConversation
     */
    readonly xNeynarExperimental?: boolean

    /**
     * The depth of replies in the conversation that will be returned (default 2)
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiLookupCastConversation
     */
    readonly replyDepth?: number

    /**
     * Include all parent casts in chronological order
     * 
     * 
     * 
     * @type {boolean}
     * @memberof CastApiLookupCastConversation
     */
    readonly includeChronologicalParentCasts?: boolean

    /**
     * Providing this will return a conversation that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiLookupCastConversation
     */
    readonly viewerFid?: number

    /**
     * Sort type for the ordering of descendants. Default is &#x60;chron&#x60;
     * 
     * 
     * 
     * @type {'chron' | 'desc_chron' | 'algorithmic'}
     * @memberof CastApiLookupCastConversation
     */
    readonly sortType?: LookupCastConversationSortTypeEnum

    /**
     * Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.
     * 
     * 
     * 
     * @type {'above' | 'below'}
     * @memberof CastApiLookupCastConversation
     */
    readonly fold?: LookupCastConversationFoldEnum

    /**
     * Number of results to fetch (Default: 20, Maximum: 50)
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiLookupCastConversation
     */
    readonly limit?: number

    /**
     * Pagination cursor.
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiLookupCastConversation
     */
    readonly cursor?: string
}

/**
 * Request parameters for publishCast operation in CastApi.
 * @export
 * @interface CastApiPublishCastRequest
 */
export interface CastApiPublishCastRequest {
    /**
     * 
     * 
     * 
     * 
     * @type {PostCastReqBody}
     * @memberof CastApiPublishCast
     */
    readonly postCastReqBody: PostCastReqBody
}

/**
 * Request parameters for searchCasts operation in CastApi.
 * @export
 * @interface CastApiSearchCastsRequest
 */
export interface CastApiSearchCastsRequest {
    /**
     * Query string to search for casts. Supported operators:  | Operator  | Description                                                                                              | | --------- | -------------------------------------------------------------------------------------------------------- | | &#x60;+&#x60;       | Acts as the AND operator. This is the default operator between terms and can usually be omitted.         | | &#x60;\\|&#x60;      | Acts as the OR operator.                                                                                 | | &#x60;*&#x60;       | When used at the end of a term, signifies a prefix query.                                                  | | &#x60;\&quot;&#x60;       | Wraps several terms into a phrase (for example, &#x60;\&quot;star wars\&quot;&#x60;).                                          | | &#x60;(&#x60;, &#x60;)&#x60;  | Wrap a clause for precedence (for example, &#x60;star + (wars \\| trek)&#x60;).                                     | | &#x60;~n&#x60;      | When used after a term (for example, &#x60;satr~3&#x60;), sets &#x60;fuzziness&#x60;. When used after a phrase, sets &#x60;slop&#x60;. | | &#x60;-&#x60;       | Negates the term.                                                                                        | | &#x60;before:&#x60; | Search for casts before a specific date. (e.g. &#x60;before:2025-04-20&#x60;)                                       | | &#x60;after:&#x60;  | Search for casts after a specific date. (e.g. &#x60;after:2025-04-20&#x60;)                                         |
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiSearchCasts
     */
    readonly q: string

    /**
     * Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
     * 
     * 
     * @globalHeader
     * @type {boolean}
     * @memberof CastApiSearchCasts
     */
    readonly xNeynarExperimental?: boolean

    /**
     * Choices are: - &#x60;literal&#x60; - Searches for the words in the query string (default) - &#x60;semantic&#x60; - Searches for the meaning of the query string - &#x60;hybrid&#x60; - Combines both literal and semantic results
     * 
     * 
     * 
     * @type {'literal' | 'semantic' | 'hybrid'}
     * @memberof CastApiSearchCasts
     */
    readonly mode?: SearchCastsModeEnum

    /**
     * Choices are: - &#x60;desc_chron&#x60; - All casts sorted by time (default) - &#x60;algorithmic&#x60; - Casts sorted by engagement and time
     * 
     * 
     * 
     * @type {'desc_chron' | 'algorithmic'}
     * @memberof CastApiSearchCasts
     */
    readonly sortType?: SearchCastsSortTypeEnum

    /**
     * Fid of the user whose casts you want to search
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiSearchCasts
     */
    readonly authorFid?: number

    /**
     * Providing this will return search results that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiSearchCasts
     */
    readonly viewerFid?: number

    /**
     * Parent URL of the casts you want to search
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiSearchCasts
     */
    readonly parentUrl?: string

    /**
     * Channel ID of the casts you want to search
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiSearchCasts
     */
    readonly channelId?: string

    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     * 
     * 
     * 
     * @type {number}
     * @memberof CastApiSearchCasts
     */
    readonly limit?: number

    /**
     * Pagination cursor
     * 
     * 
     * 
     * @type {string}
     * @memberof CastApiSearchCasts
     */
    readonly cursor?: string
}

/**
 * CastApi - object-oriented interface
 * @export
 * @class CastApi
 * @extends {BaseAPI}
 */
export class CastApi extends BaseAPI implements CastApiInterface {
    /**
     * Delete an existing cast.  (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {CastApiDeleteCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
     * 
     */
    public deleteCast(requestParameters: CastApiDeleteCastRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).deleteCast(requestParameters.deleteCastReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch multiple casts using their respective hashes.
     * @summary Bulk fetch casts
     * @param {CastApiFetchBulkCastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
     * 
     */
    public fetchBulkCasts(requestParameters: CastApiFetchBulkCastsRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).fetchBulkCasts(requestParameters.casts, requestParameters.xNeynarExperimental, requestParameters.viewerFid, requestParameters.sortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches all composer actions on Warpcast. You can filter by top or featured.
     * @summary Fetch composer actions
     * @param {CastApiFetchComposerActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
     * 
     */
    public fetchComposerActions(requestParameters: CastApiFetchComposerActionsRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).fetchComposerActions(requestParameters.list, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crawls the given URL and returns metadata useful when embedding the URL in a cast.
     * @summary Embedded URL metadata
     * @param {CastApiFetchEmbeddedUrlMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)
     * 
     */
    public fetchEmbeddedUrlMetadata(requestParameters: CastApiFetchEmbeddedUrlMetadataRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).fetchEmbeddedUrlMetadata(requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets information about an individual cast by passing in a Farcaster web URL or cast hash
     * @summary By hash or URL
     * @param {CastApiLookupCastByHashOrWarpcastUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
     * 
     */
    public lookupCastByHashOrWarpcastUrl(requestParameters: CastApiLookupCastByHashOrWarpcastUrlRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).lookupCastByHashOrWarpcastUrl(requestParameters.identifier, requestParameters.type, requestParameters.xNeynarExperimental, requestParameters.viewerFid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
     * @summary Conversation for a cast
     * @param {CastApiLookupCastConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
     * 
     */
    public lookupCastConversation(requestParameters: CastApiLookupCastConversationRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).lookupCastConversation(requestParameters.identifier, requestParameters.type, requestParameters.xNeynarExperimental, requestParameters.replyDepth, requestParameters.includeChronologicalParentCasts, requestParameters.viewerFid, requestParameters.sortType, requestParameters.fold, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Post a cast
     * @param {CastApiPublishCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
     * 
     */
    public publishCast(requestParameters: CastApiPublishCastRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).publishCast(requestParameters.postCastReqBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for casts based on a query string, with optional AND filters
     * @summary Search for casts
     * @param {CastApiSearchCastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
     * 
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
     * 
     */
    public searchCasts(requestParameters: CastApiSearchCastsRequest, options?: RawAxiosRequestConfig) {
        return CastApiFp(this.configuration).searchCasts(requestParameters.q, requestParameters.xNeynarExperimental, requestParameters.mode, requestParameters.sortType, requestParameters.authorFid, requestParameters.viewerFid, requestParameters.parentUrl, requestParameters.channelId, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const FetchBulkCastsSortTypeEnum = {
    Trending: 'trending',
    Likes: 'likes',
    Recasts: 'recasts',
    Replies: 'replies',
    Recent: 'recent'
} as const;
export type FetchBulkCastsSortTypeEnum = typeof FetchBulkCastsSortTypeEnum[keyof typeof FetchBulkCastsSortTypeEnum];
/**
 * @export
 */
export const FetchComposerActionsListEnum = {
    Top: 'top',
    Featured: 'featured'
} as const;
export type FetchComposerActionsListEnum = typeof FetchComposerActionsListEnum[keyof typeof FetchComposerActionsListEnum];
/**
 * @export
 */
export const LookupCastByHashOrWarpcastUrlTypeEnum = {
    Url: 'url',
    Hash: 'hash'
} as const;
export type LookupCastByHashOrWarpcastUrlTypeEnum = typeof LookupCastByHashOrWarpcastUrlTypeEnum[keyof typeof LookupCastByHashOrWarpcastUrlTypeEnum];
/**
 * @export
 */
export const LookupCastConversationTypeEnum = {
    Url: 'url',
    Hash: 'hash'
} as const;
export type LookupCastConversationTypeEnum = typeof LookupCastConversationTypeEnum[keyof typeof LookupCastConversationTypeEnum];
/**
 * @export
 */
export const LookupCastConversationSortTypeEnum = {
    Chron: 'chron',
    DescChron: 'desc_chron',
    Algorithmic: 'algorithmic'
} as const;
export type LookupCastConversationSortTypeEnum = typeof LookupCastConversationSortTypeEnum[keyof typeof LookupCastConversationSortTypeEnum];
/**
 * @export
 */
export const LookupCastConversationFoldEnum = {
    Above: 'above',
    Below: 'below'
} as const;
export type LookupCastConversationFoldEnum = typeof LookupCastConversationFoldEnum[keyof typeof LookupCastConversationFoldEnum];
/**
 * @export
 */
export const SearchCastsModeEnum = {
    Literal: 'literal',
    Semantic: 'semantic',
    Hybrid: 'hybrid'
} as const;
export type SearchCastsModeEnum = typeof SearchCastsModeEnum[keyof typeof SearchCastsModeEnum];
/**
 * @export
 */
export const SearchCastsSortTypeEnum = {
    DescChron: 'desc_chron',
    Algorithmic: 'algorithmic'
} as const;
export type SearchCastsSortTypeEnum = typeof SearchCastsSortTypeEnum[keyof typeof SearchCastsSortTypeEnum];
