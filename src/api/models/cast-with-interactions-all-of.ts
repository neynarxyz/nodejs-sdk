/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.29.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { CastTextRange } from './cast-text-range';
// May contain unused imports in some cases
// @ts-ignore
import type { CastViewerContext } from './cast-viewer-context';
// May contain unused imports in some cases
// @ts-ignore
import type { CastWithInteractionsReactions } from './cast-with-interactions-reactions';
// May contain unused imports in some cases
// @ts-ignore
import type { CastWithInteractionsReplies } from './cast-with-interactions-replies';
// May contain unused imports in some cases
// @ts-ignore
import type { ChannelDehydrated } from './channel-dehydrated';
// May contain unused imports in some cases
// @ts-ignore
import type { ChannelOrChannelDehydrated } from './channel-or-channel-dehydrated';
// May contain unused imports in some cases
// @ts-ignore
import type { ChannelUserContext } from './channel-user-context';
// May contain unused imports in some cases
// @ts-ignore
import type { Frame } from './frame';
// May contain unused imports in some cases
// @ts-ignore
import type { User } from './user';

/**
 * 
 * @export
 * @interface CastWithInteractionsAllOf
 */
export interface CastWithInteractionsAllOf {
    /**
     * 
     * @type {Array<Frame>}
     * @memberof CastWithInteractionsAllOf
     */
    'frames'?: Array<Frame>;
    /**
     * 
     * @type {CastWithInteractionsReactions}
     * @memberof CastWithInteractionsAllOf
     */
    'reactions': CastWithInteractionsReactions;
    /**
     * 
     * @type {CastWithInteractionsReplies}
     * @memberof CastWithInteractionsAllOf
     */
    'replies': CastWithInteractionsReplies;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAllOf
     */
    'thread_hash': string | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof CastWithInteractionsAllOf
     */
    'mentioned_profiles': Array<User>;
    /**
     * Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_profiles list. 
     * @type {Array<CastTextRange>}
     * @memberof CastWithInteractionsAllOf
     */
    'mentioned_profiles_ranges': Array<CastTextRange>;
    /**
     * 
     * @type {Array<ChannelDehydrated>}
     * @memberof CastWithInteractionsAllOf
     */
    'mentioned_channels': Array<ChannelDehydrated>;
    /**
     * Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_channels list. 
     * @type {Array<CastTextRange>}
     * @memberof CastWithInteractionsAllOf
     */
    'mentioned_channels_ranges': Array<CastTextRange>;
    /**
     * 
     * @type {ChannelOrChannelDehydrated}
     * @memberof CastWithInteractionsAllOf
     */
    'channel': ChannelOrChannelDehydrated | null;
    /**
     * 
     * @type {CastViewerContext}
     * @memberof CastWithInteractionsAllOf
     */
    'viewer_context'?: CastViewerContext;
    /**
     * 
     * @type {ChannelUserContext}
     * @memberof CastWithInteractionsAllOf
     */
    'author_channel_context'?: ChannelUserContext;
}

