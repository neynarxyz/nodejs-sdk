/* tslint:disable */
/* eslint-disable */
/**
 * Neynar API
 * The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 3.9.0
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { CastEmbeddedParentAuthor } from './cast-embedded-parent-author';
// May contain unused imports in some cases
// @ts-ignore
import type { CastNotificationType } from './cast-notification-type';
// May contain unused imports in some cases
// @ts-ignore
import type { CastViewerContext } from './cast-viewer-context';
// May contain unused imports in some cases
// @ts-ignore
import type { CastWithInteractionsAndConversationsRef } from './cast-with-interactions-and-conversations-ref';
// May contain unused imports in some cases
// @ts-ignore
import type { CastWithInteractionsReactions } from './cast-with-interactions-reactions';
// May contain unused imports in some cases
// @ts-ignore
import type { CastWithInteractionsReplies } from './cast-with-interactions-replies';
// May contain unused imports in some cases
// @ts-ignore
import type { ChannelDehydrated } from './channel-dehydrated';
// May contain unused imports in some cases
// @ts-ignore
import type { ChannelOrChannelDehydrated } from './channel-or-channel-dehydrated';
// May contain unused imports in some cases
// @ts-ignore
import type { ChannelUserContext } from './channel-user-context';
// May contain unused imports in some cases
// @ts-ignore
import type { Embed } from './embed';
// May contain unused imports in some cases
// @ts-ignore
import type { Frame } from './frame';
// May contain unused imports in some cases
// @ts-ignore
import type { TextRange } from './text-range';
// May contain unused imports in some cases
// @ts-ignore
import type { User } from './user';
// May contain unused imports in some cases
// @ts-ignore
import type { UserDehydrated } from './user-dehydrated';

/**
 * 
 * @export
 * @interface CastWithInteractionsAndConversations
 */
export interface CastWithInteractionsAndConversations {
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'object': CastWithInteractionsAndConversationsObjectEnum;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'parent_hash': string | null;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'parent_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'root_parent_url': string | null;
    /**
     * 
     * @type {CastEmbeddedParentAuthor}
     * @memberof CastWithInteractionsAndConversations
     */
    'parent_author': CastEmbeddedParentAuthor;
    /**
     * 
     * @type {User}
     * @memberof CastWithInteractionsAndConversations
     */
    'author': User;
    /**
     * 
     * @type {UserDehydrated}
     * @memberof CastWithInteractionsAndConversations
     */
    'app'?: UserDehydrated | null;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'timestamp': string;
    /**
     * 
     * @type {Array<Embed>}
     * @memberof CastWithInteractionsAndConversations
     */
    'embeds': Array<Embed>;
    /**
     * 
     * @type {CastNotificationType}
     * @memberof CastWithInteractionsAndConversations
     */
    'type'?: CastNotificationType;
    /**
     * 
     * @type {Array<Frame>}
     * @memberof CastWithInteractionsAndConversations
     */
    'frames'?: Array<Frame>;
    /**
     * 
     * @type {CastWithInteractionsReactions}
     * @memberof CastWithInteractionsAndConversations
     */
    'reactions': CastWithInteractionsReactions;
    /**
     * 
     * @type {CastWithInteractionsReplies}
     * @memberof CastWithInteractionsAndConversations
     */
    'replies': CastWithInteractionsReplies;
    /**
     * 
     * @type {string}
     * @memberof CastWithInteractionsAndConversations
     */
    'thread_hash': string | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof CastWithInteractionsAndConversations
     */
    'mentioned_profiles': Array<User>;
    /**
     * Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_profiles list.
     * @type {Array<TextRange>}
     * @memberof CastWithInteractionsAndConversations
     */
    'mentioned_profiles_ranges': Array<TextRange>;
    /**
     * 
     * @type {Array<ChannelDehydrated>}
     * @memberof CastWithInteractionsAndConversations
     */
    'mentioned_channels': Array<ChannelDehydrated>;
    /**
     * Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_channels list.
     * @type {Array<TextRange>}
     * @memberof CastWithInteractionsAndConversations
     */
    'mentioned_channels_ranges': Array<TextRange>;
    /**
     * 
     * @type {ChannelOrChannelDehydrated}
     * @memberof CastWithInteractionsAndConversations
     */
    'channel': ChannelOrChannelDehydrated | null;
    /**
     * 
     * @type {CastViewerContext}
     * @memberof CastWithInteractionsAndConversations
     */
    'viewer_context'?: CastViewerContext;
    /**
     * 
     * @type {ChannelUserContext}
     * @memberof CastWithInteractionsAndConversations
     */
    'author_channel_context'?: ChannelUserContext;
    /**
     * note: This is recursive. It contains the direct replies to the cast and their direct replies up to n reply_depth.
     * @type {Array<CastWithInteractionsAndConversationsRef>}
     * @memberof CastWithInteractionsAndConversations
     */
    'direct_replies': Array<CastWithInteractionsAndConversationsRef>;
}

export const CastWithInteractionsAndConversationsObjectEnum = {
    Cast: 'cast'
} as const;

export type CastWithInteractionsAndConversationsObjectEnum = typeof CastWithInteractionsAndConversationsObjectEnum[keyof typeof CastWithInteractionsAndConversationsObjectEnum];


